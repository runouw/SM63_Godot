<DOMSymbolItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" name="  Course Items-PL/ Various Platforms/ Coded Wooden PL/Falling Log Code (graphics)" itemID="45ca0c79-0000037e" linkageExportForAS="true" linkageExportInFirstFrame="false" linkageIdentifier="FallingLog" lastModified="1241372336" lastUniqueIdentifier="1">
  <timeline>
    <DOMTimeline name="Falling Log Code (graphics)">
      <layers>
        <DOMLayer name="Layer 2" color="#9933CC" current="true" isSelected="true">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <Actionscript>
                <script><![CDATA[if (fallspeed == undefined) {
	fallspeed = 10;
}
if (fallamount == undefined) {
	fallamount = 24;
}
if (fallwait == undefined) {
	fallwait = 10;
}
if (quakeamount == undefined) {
	quakeamount = 3;
}
depth = _root.Course.BPlatforms.getNextHighestDepth();
_root.Course.BPlatforms.attachMovie("FallinglogCode", "FallinglogCode"+depth, depth, {_x:_x, _y:_y, fallspeed:fallspeed, fallamount:fallamount, fallwait:fallwait, quakeamount:quakeamount, yspeed:0, fall:false});
startcount = 0;
onEnterFrame = function () {
	if (startcount<5) {
		startcount++;
	}
	if (_root.PauseGame == false && startcount>3 && Math.abs((_root.currentCamX)-(_x+_parent._x))<(600) && Math.abs((_root.currentCamY)-(_y+_parent._y))<(600)) {
		tellTarget (_root.Course.BPlatforms["FallinglogCode"+depth]) {
			if (fall == false) {
				this._alpha += 10;
				this._alpha = Math.min(this._alpha, 100);
				if (Math.abs((_root.currentCamX)-(_x+_parent._x))<(200) && Math.abs((_root.currentCamY)-(_y+_parent._y))<(200)) {
					if (this._alpha>=100 && hitTest((_root.Course.Char._x*_root.coursescale/100)+_root.Course._x, (_root.Course.Char._y*_root.coursescale/100)+_root.Course._y, false)) {
						returnX = _x;
						returnY = _y;
						timefall = 0;
						fallcount = 0;
						fall = true;
					}
				}
			}
			if (fall == true) {
				timefall++;
				if (timefall>fallwait) {
					fallcount++;
					yspeed += _root.gravity;
					yspeed = _root.groundFriction(yspeed, 0.1, 1.05);
				} else {
					_y = returnY+(Math.random()*quakeamount-Math.random()*quakeamount);
					_x = returnX+(Math.random()*quakeamount-Math.random()*quakeamount);
					if (timefall == fallwait) {
						_y = returnY;
						_x = returnX;
					}
				}
				if (yspeed<0) {
					_y -= yspeed;
				}
				if (hitTest((_root.Course.Char._x*_root.coursescale/100)+_root.Course._x, (_root.Course.Char._y*_root.coursescale/100)+_root.Course._y, false)) {
					//_root.Course.Char._x += currentspeedX;
					_root.Course.Char._y += yspeed;
					//_root.Course.Char.xspeed = _root.groundFriction(_root.Course.Char.xspeed, 0.3, 1.1);
					if (landedon == false) {
						//_root.Course.Char.xspeed -= currentspeedX;
						//
						//this.frame = "ride";
						//
					}
					landedon = true;
				} else {
					if (landedon == true) {
						//_root.Course.Char.xspeed += currentspeedX;
						_root.Course.Char.yspeed += yspeed;
					}
					landedon = false;
				}
				if (yspeed<0) {
					_y += yspeed;
				}
				_y += yspeed;
				if (fallcount>fallamount-10) {
					this._alpha -= 10;
					this._alpha = Math.max(this._alpha, 0);
				}
				if (fallcount>fallamount) {
					fallcount = 0;
					yspeed = 0;
					_x = returnX;
					_y = returnY;
					fall = false;
				}
			}
			this._y = _y;
			this._x = _x;
		}
	}
};
]]></script>
              </Actionscript>
              <elements/>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="Layer 1" color="#4FFF4F">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMBitmapInstance libraryItemName="  Course Items-PL/ Various Platforms/ Non-Coded PL/ Coded PL Bits/Log Bit">
                  <matrix>
                    <Matrix tx="-8.5" ty="-9"/>
                  </matrix>
                </DOMBitmapInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
      </layers>
    </DOMTimeline>
  </timeline>
</DOMSymbolItem>