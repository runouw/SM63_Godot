<DOMSymbolItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" name="   Enemies/Normal/ G-Z/ Shy-Guy/Shy Guy Code" itemID="46096f5d-0000061c" linkageExportForAS="true" linkageExportInFirstFrame="false" linkageIdentifier="ShyGuyCode" lastModified="1237753151" lastUniqueIdentifier="3">
  <timeline>
    <DOMTimeline name="Shy Guy Code">
      <layers>
        <DOMLayer name="Layer 3" color="#FFFF4F" current="true" isSelected="true">
          <frames>
            <DOMFrame index="0" duration="2" keyMode="9728">
              <Actionscript>
                <script><![CDATA[if (scale == undefined) {
	scale = 1;
}
if (State == undefined) {
	State = "Walk";
}
savestate = State;
if (walkspeed == undefined) {
	walkspeed = 2;
}
if (airspeed == undefined) {
	airspeed = 1;
}
if (frame == undefined) {
	frame = "Walk";
}
if (movedirection == undefined) {
	randomnum = random(2);
	if (randomnum == 0) {
		movedirection = "right";
	} else {
		movedirection = "left";
	}
} else {
	randomnum = 0;
}
if (WalkDistance == undefined) {
	WalkDistance = 75;
}
if (IdleTime == undefined) {
	IdleTime = 50;
}
if (randomWalkDistance == undefined) {
	randomWalkDistance = 3;
}
if (randomIdleTime == undefined) {
	randomIdleTime = 2;
}
restartvars = function () {
	deadcount = 0;
	State = savestate;
	bounce = false;
	frame = "Idle";
	xspeed = 0;
	yspeed = 0;
	wide = 7*scale;
	tall = 25*scale;
	air = false;
	idle = true;
	_xscale = scale*100;
	_yscale = scale*100;
	//
	rot = 0;
	rotspeed = 0;
	powerhit = false;
};
restartvars();
//
saveY = _y;
saveX = _x;
//
if (_root.Course.coincountnum == undefined) {
	_root.Course.coincountnum = 0;
} else {
	_root.Course.coincountnum++;
}
if (_root["coindata"+_root.playingcourse][0] == undefined) {
	_root["coindata"+_root.playingcourse] = [""];
}
coinnum = _root.Course.coincountnum;
if (_root["coindata"+_root.playingcourse][coinnum] == 1 && _root["coindata"+_root.playingcourse][coinnum] !== undefined) {
	//gotoAndStop("end");
}
]]></script>
              </Actionscript>
              <elements/>
            </DOMFrame>
            <DOMFrame index="2" keyMode="9728">
              <Actionscript>
                <script><![CDATA[stop();
/*_root.Mariosound = new Sound(this);
_root.Mariosound.attachSound("Shy-Guy");
_root.Mariosound.start(0, 1);
_root.Mariosound.setVolume(_root.MarioVolume);*/
onEnterFrame = function () {
	if (_root.PauseGame == false && _root.playpause == false && Math.abs((_root.currentCamX)-(_x+_parent._x))<1000 && Math.abs((_root.currentCamY)-(_y+_parent._y))<1000) {
		if (State !== "Squish") {
			_yscale = scale*100;
			if (movedirection == "left") {
				_xscale = -scale*100;
			} else {
				_xscale = scale*100;
			}
			if (State == "Flying") {
				// move up and down code
			}
			if (State == "Walk") {
				if (idle == false) {
					if (movedirection == "right") {
						if (State == "Walk") {
							Moveright();
						}
					} else {
						if (State == "Walk") {
							Moveleft();
						}
					}
					randomnum += (Math.random()*randomWalkDistance)+1;
					if (randomnum>WalkDistance) {
						//
						idle = true;
						//      
						randomnum = 0;
					}
				} else {
					xspeed = _root.groundFriction(xspeed, 0.5, 1.2);
					randomnum += (Math.random()*randomIdleTime)+1;
					if (randomnum>IdleTime) {
						idle = false;
						randomnum = 0;
						//
						if (movedirection == "right") {
							movedirection = "left";
							_xscale = -scale*100;
						} else {
							movedirection = "right";
							_xscale = scale*100;
						}
					}
				}
			}
			if (State == "Flying" && airspeed>0) {
				//
				if (movedirection == "right") {
					xspeed += (airspeed-xspeed)/5;
				} else {
					xspeed += (-airspeed-xspeed)/5;
				}
				randomnum++;
				if (randomnum>WalkDistance) {
					//
					if (movedirection == "right") {
						movedirection = "left";
						_xscale = -scale*100;
					} else {
						movedirection = "right";
						_xscale = scale*100;
					}
					//      
					randomnum = 0;
				}
			}
			if (State == "Walk") {
				xspeed *= 0.95;
			}
			//                                                                                                                                        
			mariowater = this.body.hitTest(_root.Course.Char.charClip.water) || this.body.hitTest(_root.Course.Char.charClip.frame.water) || this.head.hitTest(_root.Course.Char.charClip.water);
			marioinvincible = ((_root.Course.Char.attackFrame == "Dive" && _root.Course.Char.attack == true && Math.abs(_root.Course.Char.xspeed)>0.3) || (Math.abs(_root.Course.Char.xspeed)>7 && _root.KeySPACE() && _root.Power>=100 && _root.WaterAmount>0 && _root.Fluddpow == "T"));
			//                   
			//                                                                                     
			if (State == "Flying" && this.body.hitTest(_root.Course.Char.charClip.body) && marioinvincible) {
				xspeed += _root.Course.Char.xspeed/2.5;
				yspeed += _root.Course.Char.yspeed/5;
				rotspeed = _root.Course.Char.xspeed*2;
				State = "Tumble";
				if (Math.abs(xspeed/(scale/2))>17) {
					powerhit = true;
				}
			}
			if (State == "Walk" && yspeed>-3 && this.body.hitTest(_root.Course.Char.charClip.body) && marioinvincible) {
				xspeed += _root.Course.Char.xspeed/1.5;
				yspeed -= 5;
				_y -= 5;
				rotspeed = _root.Course.Char.xspeed*2;
				State = "Tumble";
				if (Math.abs(xspeed/(scale/2))>23) {
					powerhit = true;
				}
			}
			if (State == "Tumble" && yspeed>-3 && this.body.hitTest(_root.Course.Char.charClip.body) && marioinvincible) {
				xspeed += _root.Course.Char.xspeed/1.5;
				yspeed -= 5;
				_y -= 5;
				rotspeed = _root.Course.Char.xspeed*2;
				State = "Tumble";
				if (Math.abs(xspeed/(scale/2))>14) {
					powerhit = true;
				}
			}
			//                                                                                                                                    
			if ((State == "Flying" || State == "Walk" || State == "Tumble") && mariowater) {
				//
				yspeed -= 1.5/scale;
				if (_root.Course.Char.attackFrame == "Spin" && _root.Course.Char.attack == true) {
					if (_root.Course.Char._x>_x+_parent._x) {
						xspeed *= 0.7;
						xspeed -= 20/scale;
					} else {
						xspeed *= 0.7;
						xspeed += 20/scale;
					}
				} else {
					if (_root.Course.Char._xscale>0) {
						if (_root.Fluddpow == "T" || (_root.Fluddpow == "H" && _root.Course.Char.attackFrame == "Dive" && _root.Course.Char.attack == true)) {
							xspeed *= 0.9;
							xspeed += 6/scale;
						} else {
							xspeed *= 0.9;
							xspeed -= 3/scale;
						}
					} else {
						if (_root.Fluddpow == "T" || (_root.Fluddpow == "H" && _root.Course.Char.attackFrame == "Dive" && _root.Course.Char.attack == true)) {
							xspeed *= 0.9;
							xspeed -= 6/scale;
						} else {
							xspeed *= 0.9;
							xspeed += 3/scale;
						}
					}
				}
				//
				State = "Tumble";
				if (Math.abs(xspeed/(scale/2))>21) {
					powerhit = true;
				}
			}
			//                                                       
			if (State == "Flying" && this.head.hitTest(_root.Course.Char.charClip.feet) && _root.Course.Char.air == true && _root.Course.Char.yspeed>0) {
				_root.Course.Char.yspeed /= 2;
				_root.Course.Char.xspeed /= 2;
				_root.Course.Char.yspeed -= 15;
				//
				_root.Course.Char.attack = true;
				_root.Course.Char.attackFrame = "Spin";
				_root.Course.Char.charClip.speed = 20;
				//
				State = "Walk";
			}
			if (State == "Walk" && this.head.hitTest(_root.Course.Char.charClip.feet) && _root.Course.Char.air == true && _root.Course.Char.yspeed>0) {
				//_root.Course.Char.yspeed /= 2;
				//_root.Course.Char.xspeed /= 2;
				//_root.Course.Char.yspeed -= 12;
				xspeed = 0;
				bounce = true;
				State = "Squish";
			}
			//                                                                                                                                            
			if (State == "Flying" && this.body.hitTest(_root.Course.Char.charClip.body) && !marioinvincible) {
				if (_root.Course.Char._x>_x+_parent._x) {
					_root.MarioHit(1, 90, -5, 7, 7, "");
				} else {
					_root.MarioHit(1, 90, -5, -7, 7, "");
				}
			}
			if (State == "Walk" && this.body.hitTest(_root.Course.Char.charClip.body) && _root.Course.Char.frame !== "" && !marioinvincible) {
				if (_root.Course.Char._x>_x+_parent._x) {
					_root.MarioHit(1, 90, -5, 7, 7, "");
				} else {
					_root.MarioHit(1, 90, -5, -7, 7, "");
				}
			}
			//                                                                                                                        
			// enemy hurt  
			if (State == "Flying" || State == "Walk") {
				if (_root.Course.Enemyhurt.hitTest(((_x-wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) && _root.Course.Enemyhurt.hitTest(((_x+wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
					yspeed -= Math.abs((7)/5)/scale;
					xspeed += (((Math.random()*4-2)-(xspeed/1.5)))/scale;
					_y -= 3;
					rotspeed = xspeed*2;
					State = "Tumble";
					powerhit = true;
				} else {
					if (_root.Course.Enemyhurt.hitTest(((_x-wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
						yspeed -= Math.abs((7)/5)/scale;
						xspeed += Math.max((((9)-(xspeed/1.5)))/scale, 0);
						_y -= 3;
						rotspeed = xspeed*2;
						State = "Tumble";
						powerhit = true;
					}
					if (_root.Course.Enemyhurt.hitTest(((_x+wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
						yspeed -= Math.abs((7)/5)/scale;
						xspeed += Math.min((((-9)-(xspeed/1.5)))/scale, 0);
						_y -= 3;
						rotspeed = xspeed*2;
						State = "Tumble";
						powerhit = true;
					}
				}
			}
			if (State !== "Flying" && _root.Course.Water.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
				State = "Squish";
				xspeed = 0;
				yspeed = 0;
			}
			if (State !== "Flying" && _root.Course.Lava.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
				State = "Squish";
				xspeed = 0;
				yspeed = 0;
			}
			//                                                                                                                                                                                             
			if (State == "Walk" || State == "Tumble") {
				if (_root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) || _root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
					if (State == "Tumble") {
						xspeed *= 0.9;
						if (yspeed>3 && powerhit == true) {
							State = "Squish";
							rot = 0;
						} else {
							if (Math.abs(xspeed)<3) {
								State = "Walk";
							}
						}
					}
					yspeed = 0;
					air = false;
				} else {
					yspeed += _root.gravity;
					if (yspeed>7) {
						yspeed *= 0.9;
					}
					air = true;
				}
			}
			while (_root.Course.Platforms.hitTest(((_x+wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
				_x--;
				if (State == "Walk") {
					if (movedirection == "right") {
						movedirection = "left";
					}
				}
				if (State == "Tumble" && Math.abs(xspeed)>3 && powerhit == true) {
					State = "Squish";
					rot = -90;
				}
			}
			while (_root.Course.Platforms.hitTest(((_x-wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
				_x++;
				if (State == "Walk") {
					if (movedirection == "left") {
						movedirection = "right";
					}
				}
				if (State == "Tumble" && Math.abs(xspeed)>3 && powerhit == true) {
					State = "Squish";
					rot = 90;
				}
			}
			if (State !== "Flying") {
				while ((_root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+3)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) || _root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+3)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) && !(_root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y-1)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) || _root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y-1)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true))) {
					_y++;
					air = false;
				}
			}
			while (_root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y-1)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) || _root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y-1)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
				_y--;
				air = false;
			}
			if (State == "Flying") {
				frame = "Flying";
			}
			if (State == "Walk" && frame !== "Turn") {
				if (air == false) {
					if (idle == false) {
						frame = "Walk";
					} else {
						frame = "Idle";
					}
				} else {
					frame = "Jump";
				}
			}
			if (State == "Tumble") {
				frame = "Tumble";
				rot += rotspeed;
				rotspeed *= 0.95;
			} else if (State !== "Squish") {
				rotspeed = 0;
				rot = _root.groundFriction(rot, 2, 1.1);
			}
			clip.frame._rotation = rot;
			//        
			yspeed = Math.max(yspeed, -12);
			yspeed = Math.min(yspeed, 12);
			xspeed = Math.max(xspeed, -7);
			xspeed = Math.min(xspeed, 7);
			_y += yspeed;
			_x += xspeed;
		} else {
			clip.frame._rotation = rot;
			frame = "Squish";
		}
		clip.gotoAndStop(frame);
	}
	//       
	if (State == "Squish") {
		deadcount++;
	}
	if ((deadcount>30 || Math.abs((_root.currentCamX)-(_x+_parent._x))>600 || Math.abs((_root.currentCamY)-(_y+_parent._y))>600) && (Math.abs((_root.currentCamX)-(saveX+_parent._x))>600 || Math.abs((_root.currentCamY)-(saveY+_parent._y))>600)) {
		_y = saveY;
		_x = saveX;
		//
		restartvars();
		//
	}
	//       
};
]]></script>
              </Actionscript>
              <elements/>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="Layer 2" color="#9933CC" locked="true" outline="true" useOutlineView="true">
          <frames>
            <DOMFrame index="0" duration="2" keyMode="9728">
              <Actionscript>
                <script><![CDATA[Moveright = function () {
	offground = true;
	if (offground == false) {
		break;
	}
	for (Xspot2=15; Xspot2<40; Xspot2 += 10) {
		Xspot = Xspot2+(xspeed*7);
		adding = 3;
		for (Yspot=-5; Yspot<30; Yspot += adding += 0.5) {
			adding = Math.min(adding, 5);
			if (_root.Course.Platforms.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
				offground = false;
				break;
			}
			if (_root.Course.BPlatforms.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
				offground = false;
				break;
			}
			if (_root.Course.Water.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
				offground = true;
				break;
			}
		}
	}
	if (offground == false) {
		if (frame !== "Turn") {
			xspeed += (walkspeed-xspeed)/5;
		}
	} else {
		randomnum = 0;
		if (air == false && !frame == "Shell") {
			frame = "Turn";
		}
	}
};
Moveleft = function () {
	offground = true;
	if (offground == false) {
		break;
	}
	for (Xspot2=15; Xspot2<40; Xspot2 += 10) {
		Xspot = -Xspot2+(xspeed*7);
		adding = 3;
		for (Yspot=-5; Yspot<30; Yspot += adding += 0.5) {
			adding = Math.min(adding, 5);
			if (_root.Course.Platforms.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
				offground = false;
				break;
			}
			if (_root.Course.BPlatforms.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
				offground = false;
				break;
			}
			if (_root.Course.Water.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
				offground = true;
				break;
			}
		}
	}
	if (offground == false) {
		if (frame !== "Turn") {
			xspeed += (-walkspeed-xspeed)/5;
		}
	} else {
		randomnum = 0;
		if (air == false && !frame == "Shell") {
			frame = "Turn";
		}
	}
};
]]></script>
              </Actionscript>
              <elements/>
            </DOMFrame>
            <DOMFrame index="2" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName=" Xtra/Lineless Movieclip" name="body" selected="true">
                  <matrix>
                    <Matrix a="0.212310791015625" d="0.123703002929688" ty="-2.55"/>
                  </matrix>
                  <transformationPoint>
                    <Point y="-27.9"/>
                  </transformationPoint>
                  <color>
                    <Color alphaMultiplier="0"/>
                  </color>
                </DOMSymbolInstance>
                <DOMSymbolInstance libraryItemName=" Xtra/Lineless Movieclip" name="head" selected="true">
                  <matrix>
                    <Matrix a="0.265380859375" d="0.1416015625" ty="-17.5"/>
                  </matrix>
                  <transformationPoint>
                    <Point y="-28.25"/>
                  </transformationPoint>
                  <color>
                    <Color alphaMultiplier="0"/>
                  </color>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="Layer 1" color="#4FFF4F">
          <frames>
            <DOMFrame index="0" duration="3" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="   Enemies/Normal/ G-Z/ Shy-Guy/Shy Guy Clip" name="clip">
                  <matrix>
                    <Matrix ty="-10"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
      </layers>
    </DOMTimeline>
  </timeline>
</DOMSymbolItem>