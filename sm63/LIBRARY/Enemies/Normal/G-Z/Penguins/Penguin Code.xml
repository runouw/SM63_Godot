<DOMSymbolItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" name="   Enemies/Normal/ G-Z/ Penguins/Penguin Code" itemID="4692cdd9-0000085e" linkageExportForAS="true" linkageExportInFirstFrame="false" linkageIdentifier="PenguinCode" lastModified="1238279252" lastUniqueIdentifier="1">
  <timeline>
    <DOMTimeline name="Penguin Code">
      <layers>
        <DOMLayer name="Code" color="#9933CC" current="true" isSelected="true" autoNamed="false">
          <frames>
            <DOMFrame index="0" duration="2" keyMode="9728">
              <Actionscript>
                <script><![CDATA[if (scale == undefined) {
	scale = 1;
}
if (State == undefined) {
	State = "Walk";
}
if (walkspeed == undefined) {
	//walkspeed = 3;
	walkspeed = 1.5
}
if (frame == undefined) {
	frame = "Walk";
}
movecount = 0;
sliding = false;
if (movedirection == undefined) {
	randomnum = random(2);
	if (randomnum == 0) {
		movedirection = "right";
	} else {
		movedirection = "left";
	}
} else {
	randomnum = 0;
}
if (WalkDistance == undefined) {
	WalkDistance = 50;
}
if (shellspeed == undefined) {
	shellspeed = 10;
}
flyingcoswave = 0;
randomturncount = 50;
turncount = 0;
randomnum = 0;
if (randomIdleTime == undefined) {
	randomIdleTime = 3;
}
if (randomWalkDistance == undefined) {
	randomWalkDistance = 5;
}
if (IdleTime == undefined) {
	IdleTime = 50;
}
frame = "Idle";
xspeed = 0;
yspeed = 0;
wide = 12*scale;
tall = 25*scale;
idle = false;
air = false;
rotspeed = 0;
tumble = false;
startY = _y;
rot = 0;
_xscale = scale*100;
_yscale = scale*100;
]]></script>
              </Actionscript>
              <elements/>
            </DOMFrame>
            <DOMFrame index="2" keyMode="9728">
              <Actionscript>
                <script><![CDATA[stop();
onEnterFrame = function () {
	if (_root.PauseGame == false && _root.playpause == false && Math.abs((_root.currentCamX)-(_x+_parent._x))<1000 && Math.abs((_root.currentCamY)-(_y+_parent._y))<1000) {
		//
		if (State == "Walk" && tumble == false && WalkDistance > 0) {
			if (idle == false) {
				if (movedirection == "right") {
					Moveright();
					_xscale = -scale*100;
				} else {
					Moveleft();
					_xscale = scale*100;
				}
				frame = 2;
				randomnum += (Math.random()*randomWalkDistance)+1;
				if (randomnum>WalkDistance) {
					//
					idle = true;
					//
					randomnum = 0;
				}
			} else {
				frame = 1;
				xspeed = _root.groundFriction(xspeed, 0.5, 1.2);
				randomnum += (Math.random()*randomIdleTime)+1;
				turncount += random(5)+2;
				if (turncount>randomturncount) {
					randomturncount = random(80)+20;
					turncount = 0;
					if (movedirection == "right") {
						movedirection = "left";
						_xscale = scale*100;
					} else {
						movedirection = "right";
						_xscale = -scale*100;
					}
				}
				if (randomnum>IdleTime) {
					idle = false;
					randomnum = 0;
					//
					IdleTime = random(120)+80;
					randomturncount = random(50)+50;
					WalkDistance = random(120)+80;
					//
				}
			}
		}
		if (State == "Flying") {
			flyingcoswave += 0.1;
			yspeed = Math.cos(flyingcoswave)*0.75;
			_y += (startY-_y)/50;
			if (idle == false) {
				if (movedirection == "right") {
					//xspeed += 0.5; Steven's Edits:
					xspeed += walkspeed/6;
					xspeed *= 0.7;
					_xscale = -scale*100;
				} else {
					//xspeed -= 0.5; Steven's Edits:
					xspeed -= walkspeed/6;
					xspeed *= 0.7;
					_xscale = scale*100;
				}
				if (yspeed>0) {
					frame = "FlyingD";
				} else {
					frame = "FlyingU";
				}
				randomnum += 1;
				if (randomnum>WalkDistance && WalkDistance>0) {
					//
					idle = true;
					//      
					randomnum = 0;
				}
			} else {
				if (Math.abs(xspeed)<1) {
					frame = "Turn";
				} else {
					if (yspeed>0) {
						frame = "FlyingD";
					} else {
						frame = "FlyingU";
					}
					xspeed *= 0.8;
				}
				randomnum++;
				if (randomnum>8) {
					idle = false;
					if (movedirection == "right") {
						movedirection = "left";
					} else {
						movedirection = "right";
					}
				}
			}
		}
		if (State !== "Flying") {
			if (!HitTest("Platforms", _x, _y) && !HitTest("BPlatforms", _x, _y)) {
				yspeed += _root.gravity;
				air = true;
			} else {
				if (tumble == true) {
					yspeed = Math.min(-yspeed*0.6+3, 0);
					xspeed *= 0.6;
				} else {
					yspeed = Math.min(yspeed, 0);
				}
				air = false;
			}
		}
		//                                                                                                    
		while (HitTest("Platforms", _x, _y-1) || HitTest("BPlatforms", _x, _y-1)) {
			_y--;
		}
		while (HitTest("Platforms", _x+wide, _y-(tall/2))) {
			_x--;
			if (State == "Walk") {
				if (movedirection == "right") {
					movedirection = "left";
				}
			}
			xspeed = Math.min(-xspeed*0.7, xspeed);
		}
		while (HitTest("Platforms", _x-wide, _y-(tall/2))) {
			_x++;
			if (State == "Walk") {
				if (movedirection == "left") {
					movedirection = "right";
				}
			}
			xspeed = Math.max(-xspeed*0.7, xspeed);
		}
		while (HitTest("Platforms", _x, _y-tall)) {
			_y++;
		}
		//
		if (State == "Walk") {
			if (this.body.hitTest(_root.Course.Char.charClip.water) || this.body.hitTest(_root.Course.Char.charClip.frame.water)) {
				if (_root.Course.Char.attackFrame == "Spin" && _root.Course.Char.attack == true) {
					if (_root.Course.Char._x>_x+_parent._x) {
						_root.Course.Char.xspeed += 2;
						xspeed -= 3;
						xspeed *= 0.8;
					} else {
						_root.Course.Char.xspeed -= 2;
						xspeed += 3;
						xspeed *= 0.8;
					}
				}
			}
		}
		if (this.body.hitTest(_root.Course.Char.charClip.body) && (((State !== "Flying" && Math.abs(_root.Course.Char.xspeed)>=7 && _root.KeySPACE() && _root.Power>=100 && _root.WaterAmount>0 && _root.Fluddpow == "T")) || (_root.Invincible == true && _root.PowerTimer>0))) {
			tumble = true;
			rotspeed += _root.Course.Char.xspeed;
			rotspeed *= 0.8;
			xspeed += (_root.Course.Char.xspeed-xspeed)/2;
			xspeed *= 0.4;
			yspeed -= 5;
			yspeed *= 0.7;
		}
		if (tumble == true && State == "Flying") {
			State = "Walk";
		}
		if (((this.body.hitTest(_root.Course.Char.charClip.body) && _root.Course.Char.air == false) || (this.body.hitTest(_root.Course.Char.charClip.head) && _root.Course.Char.air == true)) && tumble == false) {
			_root.bgsoundFX = new Sound(this);
			_root.bgsoundFX.attachSound("MarioImpact");
			_root.bgsoundFX.start(0, 1);
			_root.bgsoundFX.setVolume(_root.BgVolume);
			if (_root.Course.Char._x>_x+_parent._x) {
				if (air == false && State == "Walk") {
					xspeed += _root.Course.Char.xspeed/2;
				}
				_root.Course.Char.xspeed *= -0.5;
				_root.Course.Char.xspeed += 7;
				_root.Course.Char.yspeed -= 5;
				_root.Course.Char.yspeed *= 0.5;
				//_root.MarioHit(0, 0, -5, 7, 7, "");
			} else {
				if (air == false && State == "Walk") {
					xspeed += _root.Course.Char.xspeed/2;
				}
				_root.Course.Char.xspeed *= -0.5;
				_root.Course.Char.xspeed -= 7;
				_root.Course.Char.yspeed -= 5;
				_root.Course.Char.yspeed *= 0.5;
				//_root.MarioHit(0, 0, -5, -7, 7, "");
			}
		}
		if (this.head.hitTest(_root.Course.Char.charClip.feet) && _root.Course.Char.air == true && _root.Course.Char.yspeed>1 && !(_root.Invincible == true && _root.PowerTimer>0)) {
			_root.Course.Char.yspeed *= -0.5;
			_root.Course.Char.yspeed -= 5;
			//
			_root.bgsoundFX = new Sound(this);
			_root.bgsoundFX.attachSound("MarioImpact");
			_root.bgsoundFX.start(0, 1);
			_root.bgsoundFX.setVolume(_root.BgVolume);
		}
		//                                
		if (air == false && Math.abs(xspeed)<3) {
			tumble = false;
		}
		xspeed = Math.max(xspeed, -12);
		xspeed = Math.min(xspeed, 12);
		_y += yspeed;
		_x += xspeed;
		if (tumble == true) {
			frame = "Tumble";
			rot = _rotation;
			rot += rotspeed;
		} else {
			if (frame == "Tumble") {
				frame = 1;
			}
			rot *= 0.8;
		}
		clip.frame._rotation = rot;
		clip.gotoAndStop(frame);
	}
};
]]></script>
              </Actionscript>
              <elements/>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="Code 2" color="#FFFF4F" locked="true" outline="true" useOutlineView="true" autoNamed="false">
          <frames>
            <DOMFrame index="0" duration="2" keyMode="9728">
              <Actionscript>
                <script><![CDATA[Moveright = function () {
	offground = true;
	if (offground == false) {
		break;
	}
	for (Xspot2=15; Xspot2<40; Xspot2 += 10) {
		Xspot = Xspot2+(xspeed*7);
		adding = 3;
		for (Yspot=-5; Yspot<30; Yspot += adding += 0.5) {
			adding = Math.min(adding, 5);
			if (!_root.Course.Lava.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
				if (_root.Course.Platforms.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
					offground = false;
					break;
				}
				if (_root.Course.BPlatforms.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
					offground = false;
					break;
				}
				if (_root.Course.Water.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
					offground = true;
					break;
				}
				if (_root.Course.Lava.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
					offground = true;
					break;
				}
			}
		}
	}
	if (offground == false) {
		if (frame !== "Turn") {
			xspeed += (walkspeed-xspeed)/5;
		}
	} else {
		randomnum = 0;
		if (State == "Flying") {
			movedirection = "left";
			randomnum = 0;
		}
	}
};
Moveleft = function () {
	offground = true;
	if (offground == false) {
		break;
	}
	for (Xspot2=15; Xspot2<40; Xspot2 += 10) {
		Xspot = -Xspot2+(xspeed*7);
		adding = 3;
		for (Yspot=-5; Yspot<30; Yspot += adding += 0.5) {
			adding = Math.min(adding, 5);
			if (!_root.Course.Lava.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
				if (_root.Course.Platforms.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
					offground = false;
					break;
				}
				if (_root.Course.BPlatforms.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
					offground = false;
					break;
				}
				if (_root.Course.Water.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
					offground = true;
					break;
				}
				if (_root.Course.Lava.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
					offground = true;
					break;
				}
			}
		}
	}
	if (offground == false) {
		if (frame !== "Turn") {
			xspeed += (-walkspeed-xspeed)/5;
		}
	} else {
		randomnum = 0;
		if (State == "Flying") {
			movedirection = "right";
			randomnum = 0;
		}
	}
};
HitTest = function (ground, X, Y) {
	if (_root.Course[ground].hitTest(((X)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((Y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) || _root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
		return (true);
	} else {
		return (false);
	}
};
]]></script>
              </Actionscript>
              <elements/>
            </DOMFrame>
            <DOMFrame index="2" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName=" Xtra/Lineless Movieclip" name="body">
                  <matrix>
                    <Matrix a="0.265380859375" d="0.26507568359375" tx="1" ty="2.4"/>
                  </matrix>
                  <transformationPoint>
                    <Point y="-27.9"/>
                  </transformationPoint>
                  <color>
                    <Color alphaMultiplier="0"/>
                  </color>
                </DOMSymbolInstance>
                <DOMSymbolInstance libraryItemName=" Xtra/Lineless Movieclip" name="head">
                  <matrix>
                    <Matrix a="0.265380859375" d="0.1416015625" tx="-1" ty="-15"/>
                  </matrix>
                  <transformationPoint>
                    <Point y="-28.25"/>
                  </transformationPoint>
                  <color>
                    <Color alphaMultiplier="0"/>
                  </color>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="Layer 1" color="#4FFF4F">
          <frames>
            <DOMFrame index="0" duration="3" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="   Enemies/Normal/ G-Z/ Penguins/Penguin Clip" name="clip">
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
      </layers>
    </DOMTimeline>
  </timeline>
</DOMSymbolItem>