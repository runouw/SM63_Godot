[gd_scene load_steps=6 format=3]

[ext_resource type="Script" path="res://xfl_parse/symbol_item/symbol_item.gd" id="1_0yrqp"]
[ext_resource type="Script" path="res://xfl_parse/symbol/symbol_instance.gd" id="2_kguwa"]

[sub_resource type="Animation" id="Animation_85hg5"]
length = 0.0333333
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Layer 2/Frame 0:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.0333333),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Layer 3/Frame 0:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.0333333),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Layer 1/Frame 0:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.0333333),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_q363u"]
_data = {
"Default": SubResource("Animation_85hg5")
}

[sub_resource type="GDScript" id="GDScript_s62uj"]
script/source = "extends Node
# _xscale = 100;
# _yscale = 100;
# if (distance == undefined) {
# 	distance = 150;
# }
# if (angle == undefined) {
# 	angle = 50;
# }
# if (thickness == undefined) {
# 	thickness = 20;
# }
# if (topsize == undefined) {
# 	topsize = 35;
# }
# if (basesize == undefined) {
# 	basesize = 200;
# }
# if (speed == undefined) {
# 	speed = 1000;
# }
# if (offstart == undefined) {
# 	offstart = 0;
# }
# if (graphic == undefined) {
# 	graphic = false;
# }
# //                                              
# if (graphic == false) {
# 	depth = _root.Course.BPlatforms.getNextHighestDepth();
# 	_root.Course.BPlatforms.attachMovie(\"SwingingShipGround\", \"SwingingShipGround\"+depth, depth, {_x:_x, _y:_y});
# }
# //                                                       
# rotspeed = 0;
# //
# count = 0;
# while (count++<offstart) {
# 	rotspeed += -angle/speed;
# 	angle += rotspeed;
# }
# base._yscale = topsize;
# base._xscale = topsize;
# arm._xscale = thickness;
# arm._yscale = distance;
# arm._rotation = angle;
# bell._yscale = basesize;
# bell._xscale = basesize;
# bell._y = Math.cos(_root.angleToRadians(angle))*distance;
# bell._x = -Math.sin(_root.angleToRadians(angle))*distance;
# bell._rotation = angle;
# //
# newx = bell._x;
# oldx = bell._x;
# newy = bell._y;
# oldy = bell._y;
# //
# mariodistance = 0;
# changed = false;
# onEnterFrame = function () {
# 	if (_root.PauseGame == false && _root.playpause == false) {
# 		b2._x = bell._x;
# 		b2._y = bell._y;
# 		//
# 		b5._x = b2._x+Math.cos(Math.PI*(angle)/180)*mariodistance;
# 		b5._y = b2._y+Math.sin(Math.PI*(angle)/180)*mariodistance;
# 		//
# 		newx = b5._x;
# 		newy = b5._y;
# 		diffy = newy-oldy;
# 		diffx = newx-oldx;
# 		oldx = newx;
# 		oldy = newy;
# 		if (changed == true) {
# 			diffy = 0;
# 			diffx = 0;
# 			//
# 			newx = b5._x;
# 			newy = b5._y;
# 			oldx = b5._x;
# 			oldy = b5._y;
# 		}
# 		//                             
# 		base._yscale = topsize;
# 		base._xscale = topsize;
# 		arm._xscale = thickness;
# 		arm._yscale = distance;
# 		arm._rotation = angle;
# 		bell._yscale = basesize;
# 		bell._xscale = basesize;
# 		bell._y = Math.cos(_root.angleToRadians(angle))*distance;
# 		bell._x = -Math.sin(_root.angleToRadians(angle))*distance;
# 		bell._rotation = angle;
# 		if (graphic == false) {
# 			tellTarget (_root.Course.BPlatforms[\"SwingingShipGround\"+depth]) {
# 				_y = this._y+Math.cos(_root.angleToRadians(this.angle))*this.distance;
# 				_x = this._x-Math.sin(_root.angleToRadians(this.angle))*this.distance;
# 				_rotation = this.angle;
# 				//
# 				//
# 				_yscale = this.basesize;
# 				_xscale = this.basesize;
# 				// Mario hit
# 				if (hitTest((_root.Course.Char._x*_root.coursescale/100)+_root.Course._x, ((_root.Course.Char._y+3)*_root.coursescale/100)+_root.Course._y, true) && _root.Course.Char.air == false) {
# 					if (this.changed == false && landedon == true) {
# 						_root.Course.Char._x += this.diffx;
# 						_root.Course.Char._y += this.diffY;
# 						//_root.Course.Char.xspeed = _root.groundFriction(_root.Course.Char.xspeed, 0.3, 1.1);
# 						//_root.Course.Char.xspeed = 0;
# 						charYdistance = _root.Course.Char._y-(this._y+_root.Course.BackGFX._y+this.b5._y);
# 						charXdistance = _root.Course.Char._x-(this._x+_root.Course.BackGFX._x+this.b5._x);
# 						if ((Math.abs(charYdistance)+Math.abs(charXdistance))<this.distance/2) {
# 							_root.Course.Char._x = (this._x+_root.Course.BackGFX._x+this.b5._x);
# 							_root.Course.Char._y = (this._y+_root.Course.BackGFX._y+this.b5._y);
# 						}
# 						this.mariodistance += _root.Course.Char.xspeed;
# 					}
# 					this.changed = false;
# 					//diffY = this.b5._y-(_root.Course.Char._y-_root.Course.BackGFX._y-this._y);      
# 					//_root.Course.Char._y -= diffY/3;
# 					while (hitTest((_root.Course.Char._x*_root.coursescale/100)+_root.Course._x, ((_root.Course.Char._y+3)*_root.coursescale/100)+_root.Course._y, true) && !hitTest((_root.Course.Char._x*_root.coursescale/100)+_root.Course._x, ((_root.Course.Char._y-3)*_root.coursescale/100)+_root.Course._y, true)) {
# 						_root.Course.Char._y++;
# 					}
# 					/*
# 					if (Math.abs((_root.Course.Char._x-_root.Course.BackGFX._x-this._x)-this.b5._x)>10) {
# 					this.b5._x = _root.Course.Char._x-_root.Course.BackGFX._x-this._x;
# 					this.b5._y = _root.Course.Char._y-_root.Course.BackGFX._y-this._y;
# 					//
# 					this.xdistance = this.b5._x-this.b2._x;
# 					this.ydistance = this.b5._y-this.b2._y;
# 					this.rot = Math.atan2(this.ydistance, this.xdistance);
# 					this.mariodistance = Math.sqrt(Math.pow(this.xdistance, 2)+Math.pow(this.ydistance, 2));
# 					this.mariodistance = Math.min(this.mariodistance, this.distance);
# 					if (this.xdistance<0) {
# 					this.mariodistance *= -1;
# 					}
# 					this.changed = true;
# 					}
# 					*/
# 					if (landedon == false) {
# 						_root.Course.Char.xspeed -= this.diffx;
# 						//
# 						this.b5._x = _root.Course.Char._x-_root.Course.BackGFX._x-this._x;
# 						this.b5._y = _root.Course.Char._y-_root.Course.BackGFX._y-this._y;
# 						//
# 						this.xdistance = this.b5._x-this.b2._x;
# 						this.ydistance = this.b5._y-this.b2._y;
# 						this.rot = Math.atan2(this.ydistance, this.xdistance);
# 						this.mariodistance = Math.sqrt(Math.pow(this.xdistance, 2)+Math.pow(this.ydistance, 2));
# 						this.mariodistance = Math.min(this.mariodistance, this.distance/1.75);
# 						if (this.xdistance<0) {
# 							this.mariodistance *= -1;
# 						}
# 						this.changed = true;
# 						//
# 						b5._x = b2._x+Math.cos(Math.PI*(angle)/180)*mariodistance;
# 						b5._y = b2._y+Math.sin(Math.PI*(angle)/180)*mariodistance;
# 						//       
# 					}
# 					landedon = true;
# 				} else {
# 					if (landedon == true) {
# 						_root.Course.Char.xspeed += this.diffx/2;
# 						_root.Course.Char.yspeed += this.diffy/2;
# 					}
# 					landedon = false;
# 				}
# 			}
# 		}
# 		//                                                      
# 		rotspeed += -angle/speed;
# 		angle += rotspeed;
# 	}
# };
# "

[node name="Swinging Ship Platforms" type="Node2D"]
script = ExtResource("1_0yrqp")
source_xml = "res://sm63/LIBRARY/Course Items-PL/Various Platforms/Themed PL/Rainbow Ride/Swinging Ship Platforms.xml"
linkage = ""
linkage_export = false
regenerate = false

[node name="Timeline" type="AnimationPlayer" parent="."]
libraries = {
"Timeline": SubResource("AnimationLibrary_q363u")
}

[node name="Layer 1" type="Node2D" parent="."]

[node name="Frame 0" type="Node2D" parent="Layer 1"]

[node name="DOMSymbolInstance" type="Node2D" parent="Layer 1/Frame 0"]
scale = Vector2(0.100204, 1)
script = ExtResource("2_kguwa")
path = "res://sm63_godot/Course Items-PL/Various Platforms/Themed PL/Clock Themed/Pendelum Arm.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 1.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 0.0
tint_color = Color(0, 0, 0, 1)
brightness = 0.0

[node name="@DOMSymbolInstance@48554" type="Node2D" parent="Layer 1/Frame 0"]
position = Vector2(0.25, 100)
scale = Vector2(1.82001, 1)
script = ExtResource("2_kguwa")
path = "res://sm63_godot/Course Items-PL/Various Platforms/Themed PL/Rainbow Ride/Swinging Ship PL GFX.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 1.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 0.0
tint_color = Color(0, 0, 0, 1)
brightness = 0.0

[node name="@DOMSymbolInstance@48555" type="Node2D" parent="Layer 1/Frame 0"]
position = Vector2(0, 0.05)
scale = Vector2(0.179993, 0.179993)
script = ExtResource("2_kguwa")
path = "res://sm63_godot/Course Items-PL/Various Platforms/Themed PL/Rainbow Ride/Swinging Ship Base.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 1.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 0.0
tint_color = Color(0, 0, 0, 1)
brightness = 0.0

[node name="Layer 3" type="Node2D" parent="."]

[node name="Frame 0" type="Node2D" parent="Layer 3"]

[node name="DOMSymbolInstance" type="Node2D" parent="Layer 3/Frame 0"]
position = Vector2(0, 100.3)
script = ExtResource("2_kguwa")
path = "res://sm63_godot/Blue Box.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 1.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 0.0
tint_color = Color(0, 0, 0, 1)
brightness = 0.0

[node name="@DOMSymbolInstance@48553" type="Node2D" parent="Layer 3/Frame 0"]
position = Vector2(0, 100.3)
script = ExtResource("2_kguwa")
path = "res://sm63_godot/Blue Box.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 1.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 0.0
tint_color = Color(0, 0, 0, 1)
brightness = 0.8

[node name="Layer 2" type="Node2D" parent="."]

[node name="Frame 0" type="Node2D" parent="Layer 2"]

[node name="AS2" type="Node" parent="Layer 2/Frame 0"]
script = SubResource("GDScript_s62uj")
