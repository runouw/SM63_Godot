[gd_scene load_steps=8 format=3]

[ext_resource type="Script" path="res://xfl_parse/symbol_item/symbol_item.gd" id="1_qgcsb"]
[ext_resource type="Script" path="res://xfl_parse/symbol/symbol_instance.gd" id="2_s6v3u"]

[sub_resource type="Animation" id="Animation_o168y"]
length = 0.0333333
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Layer 2/Frame 0:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.0333333),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Layer 1/Frame 0:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.0333333),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_d6oyt"]
_data = {
"Default": SubResource("Animation_o168y")
}

[sub_resource type="GDScript" id="GDScript_qav6d"]
script/source = "extends Node
# onClipEvent (load) {
# 	count = 0;
# 	landedon = false;
# 	speed = -0.1;
# 	fallspeed = 1;
# 	started = false;
# }
# onClipEvent (enterFrame) {
# 	if (_root.PauseGame == false && _root.playpause == false) {
# 		if (started == true) {
# 			_rotation += speed;
# 			_y += fallspeed;
# 		}
# 		ydistance = (_y+_parent._y)-_root.Course.Char._y;
# 		xdistance = (_x+_parent._x)-_root.Course.Char._x;
# 		distance = Math.sqrt(Math.pow(xdistance, 2)+Math.pow(ydistance, 2));
# 		rot = Math.atan2(ydistance, xdistance);
# 		xdiff = Math.cos(rot)*distance-Math.cos(rot+_root.angleToRadians(this.speed))*distance;
# 		ydiff = Math.sin(rot)*distance-Math.sin(rot+_root.angleToRadians(this.speed))*distance;
# 		//
# 		if (hitTest((_root.Course.Char._x*_root.coursescale/100)+_root.Course._x, ((_root.Course.Char._y+3)*_root.coursescale/100)+_root.Course._y, true) && _root.Course.Char.air == false) {
# 			_root.Course.Char._x += xdiff;
# 			_root.Course.Char._y += ydiff+fallspeed;
# 			//_root.Course.Char.xspeed = _root.groundFriction(_root.Course.Char.xspeed, 0.3, 1.1);
# 			if (landedon == false) {
# 				_root.Course.Char.xspeed -= xdiff;
# 				//
# 			}
# 			landedon = true;
# 			_root.Course.FrontGFX.fall0.started = true;
# 			started = true;
# 		} else {
# 			if (landedon == true) {
# 				_root.Course.Char.xspeed += xdiff;
# 				_root.Course.Char.yspeed += ydiff;
# 			}
# 			landedon = false;
# 		}
# 	}
# }
# "

[sub_resource type="GDScript" id="GDScript_q45pe"]
script/source = "extends Node
# onClipEvent (load) {
# 	count = 0;
# 	landedon = false;
# 	speed = -0.05;
# 	fallspeed = 1;
# 	started = false;
# }
# onClipEvent (enterFrame) {
# 	if (_root.PauseGame == false && _root.playpause == false) {
# 		if (started == true) {
# 			_rotation += speed;
# 			_y += fallspeed;
# 		}
# 		ydistance = (_y+_parent._y)-_root.Course.Char._y;
# 		xdistance = (_x+_parent._x)-_root.Course.Char._x;
# 		distance = Math.sqrt(Math.pow(xdistance, 2)+Math.pow(ydistance, 2));
# 		rot = Math.atan2(ydistance, xdistance);
# 		xdiff = Math.cos(rot)*distance-Math.cos(rot+_root.angleToRadians(this.speed))*distance;
# 		ydiff = Math.sin(rot)*distance-Math.sin(rot+_root.angleToRadians(this.speed))*distance;
# 		//
# 		if (hitTest((_root.Course.Char._x*_root.coursescale/100)+_root.Course._x, ((_root.Course.Char._y+3)*_root.coursescale/100)+_root.Course._y, true) && _root.Course.Char.air == false) {
# 			_root.Course.Char._x += xdiff;
# 			_root.Course.Char._y += ydiff+fallspeed;
# 			//_root.Course.Char.xspeed = _root.groundFriction(_root.Course.Char.xspeed, 0.3, 1.1);
# 			if (landedon == false) {
# 				_root.Course.Char.xspeed -= xdiff;
# 				//
# 			}
# 			landedon = true;
# 			_root.Course.FrontGFX.fall1.started = true;
# 			started = true;
# 		} else {
# 			if (landedon == true) {
# 				_root.Course.Char.xspeed += xdiff;
# 				_root.Course.Char.yspeed += ydiff;
# 			}
# 			landedon = false;
# 		}
# 	}
# }
# "

[sub_resource type="GDScript" id="GDScript_4u1sy"]
script/source = "extends Node
# onClipEvent (load) {
# 	count = 0;
# 	landedon = false;
# 	speed = -0.05;
# 	fallspeed = 1;
# 	started = false;
# }
# onClipEvent (enterFrame) {
# 	if (_root.PauseGame == false && _root.playpause == false) {
# 		if (started == true) {
# 			_rotation += speed;
# 			_y += fallspeed;
# 		}
# 		ydistance = (_y+_parent._y)-_root.Course.Char._y;
# 		xdistance = (_x+_parent._x)-_root.Course.Char._x;
# 		distance = Math.sqrt(Math.pow(xdistance, 2)+Math.pow(ydistance, 2));
# 		rot = Math.atan2(ydistance, xdistance);
# 		xdiff = Math.cos(rot)*distance-Math.cos(rot+_root.angleToRadians(this.speed))*distance;
# 		ydiff = Math.sin(rot)*distance-Math.sin(rot+_root.angleToRadians(this.speed))*distance;
# 		//
# 		if (hitTest((_root.Course.Char._x*_root.coursescale/100)+_root.Course._x, ((_root.Course.Char._y+3)*_root.coursescale/100)+_root.Course._y, true) && _root.Course.Char.air == false) {
# 			_root.Course.Char._x += xdiff;
# 			_root.Course.Char._y += ydiff+fallspeed;
# 			//_root.Course.Char.xspeed = _root.groundFriction(_root.Course.Char.xspeed, 0.3, 1.1);
# 			if (landedon == false) {
# 				_root.Course.Char.xspeed -= xdiff;
# 				//
# 			}
# 			landedon = true;
# 			_root.Course.FrontGFX.fall2.started = true;
# 			started = true;
# 		} else {
# 			if (landedon == true) {
# 				_root.Course.Char.xspeed += xdiff;
# 				_root.Course.Char.yspeed += ydiff;
# 			}
# 			landedon = false;
# 		}
# 	}
# }
# "

[node name="BC-3Platforms" type="Node2D"]
script = ExtResource("1_qgcsb")
source_xml = "res://sm63/LIBRARY/BC-3Platforms.xml"
linkage = "BC-3Platforms"
linkage_export = true
regenerate = false

[node name="Timeline" type="AnimationPlayer" parent="."]
libraries = {
"Timeline": SubResource("AnimationLibrary_d6oyt")
}

[node name="Layer 1" type="Node2D" parent="."]

[node name="Frame 0" type="Node2D" parent="Layer 1"]

[node name="Shape" type="Node2D" parent="Layer 1/Frame 0"]

[node name="@@1923" type="Polygon2D" parent="Layer 1/Frame 0/Shape"]
color = Color(0, 1, 0, 1)
polygon = PackedVector2Array(579.45, -52, 746.45, -52, 746.45, 44, 579.45, 44, 579.45, 36, -105.825, 36, 230.8, 36, 230.8, 78, -128, 78, -125.25, 75.7, -114.762, 65.975, -105, 54, -105, 53, -105.437, 44, -3033.65, 63.5, -2974.4, 63.5, -2965.15, 73.5, -2973.65, 79.25, -2981.4, 87.75, -2981.4, 120.375, -3027.9, 120.375, -3027.9, 88.75, -3036.65, 78.75, -3043.15, 72, -3036.42, 65.975, -497.65, 73.5, -497.65, 73.5, -451.028, 82.5889, -551.294, 82.5889, -533.328, 82.4889, -512.05, 81.7, -500.35, 76.6, -499.566, 75.7, -166.634, 76.472, -166.634, 76.472, -147.418, 76.5387, -128, 78, -185.65, 78, -185.65, 77.8, -167.589, 76.5387, -185.65, 78, 230.8, 78, 230.8, 103, -185.65, 103, -185.65, 78.75, -565.95, 82, -565.95, 82, -551.294, 82.5889, -566.137, 82.5889, -566.105, 82.4889, -566.137, 82.5889, -451.028, 82.5889, -448.15, 83.15, -359.625, 120.375, -359.772, 123, -578.95, 123, -566.315, 83.15, -185.65, 103, -72.1, 103, -72.1, 180, -185.65, 180, -185.65, 120.375, -3027.9, 120.375, -2981.4, 120.375, -2981.4, 159.5, -3027.9, 159.5, -3027.9, 121.92, -593.124, 121.92, -593.124, 121.92, -579.95, 123, -600.536, 123, -600.536, 123, -359.772, 123, -359.828, 124, -607.4, 124, -607.425, 124, -359.828, 124, -360.8, 141.312, -357.65, 162.9, -355, 180, -350.5, 192, -381.05, 264.625, -381.05, 264.625, -623.65, 162.575, -608.266, 126, -2002, 126, -1671.1, 126, -1671.1, 164, -2002, 164, -2002, 141.312, -185.65, 180, -72.1, 180, -72.1, 333.5, -185.65, 333.5, -185.65, 192)
polygons = Array[PackedInt32Array]([PackedInt32Array(0, 1, 2, 3, 4), PackedInt32Array(5, 6, 7, 8, 9, 10, 11, 12, 13), PackedInt32Array(14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24), PackedInt32Array(25, 26, 27, 28, 29, 30, 31, 32), PackedInt32Array(33, 34, 35, 36, 37, 38, 39), PackedInt32Array(40, 41, 42, 43, 44), PackedInt32Array(45, 46, 47, 48, 49), PackedInt32Array(50, 51, 52, 53, 54, 55, 56), PackedInt32Array(57, 58, 59, 60, 61), PackedInt32Array(62, 63, 64, 65, 66), PackedInt32Array(67, 68, 69, 70), PackedInt32Array(71, 72, 73, 74), PackedInt32Array(75, 76, 77, 78, 79, 80, 81, 82, 83, 84), PackedInt32Array(85, 86, 87, 88, 89), PackedInt32Array(90, 91, 92, 93, 94)])

[node name="Group" type="Node2D" parent="Layer 1/Frame 0"]
position = Vector2(-1505.75, -70.1)
scale = Vector2(2.93106, 1)

[node name="Shape" type="Node2D" parent="Layer 1/Frame 0/Group"]

[node name="@@1924" type="Polygon2D" parent="Layer 1/Frame 0/Group/Shape"]
color = Color(0, 0.6, 0, 1)
polygon = PackedVector2Array(-853.3, 238.1, 471.05, 238.1, 471.05, 322.1, -853.3, 322.1)
polygons = Array[PackedInt32Array]([PackedInt32Array(0, 1, 2, 3)])

[node name="@Group@1925" type="Node2D" parent="Layer 1/Frame 0"]
position = Vector2(430.15, -154.8)
rotation = 1.5708
scale = Vector2(0.498596, 1)

[node name="Shape" type="Node2D" parent="Layer 1/Frame 0/@Group@1925"]
scale = Vector2(1, 1)

[node name="@@1926" type="Polygon2D" parent="Layer 1/Frame 0/@Group@1925/Shape"]
color = Color(0, 0.6, 0, 1)
polygon = PackedVector2Array(-853.3, 238.1, 471.05, 238.1, 471.05, 322.1, -853.3, 322.1)
polygons = Array[PackedInt32Array]([PackedInt32Array(0, 1, 2, 3)])

[node name="@Group@1927" type="Node2D" parent="Layer 1/Frame 0"]
position = Vector2(-1332.6, -818.35)
scale = Vector2(3.13463, 1)

[node name="Shape" type="Node2D" parent="Layer 1/Frame 0/@Group@1927"]

[node name="@@1928" type="Polygon2D" parent="Layer 1/Frame 0/@Group@1927/Shape"]
color = Color(0, 0.6, 0, 1)
polygon = PackedVector2Array(-853.3, 238.1, 471.05, 238.1, 471.05, 322.1, -853.3, 322.1)
polygons = Array[PackedInt32Array]([PackedInt32Array(0, 1, 2, 3)])

[node name="@Group@1929" type="Node2D" parent="Layer 1/Frame 0"]
position = Vector2(-3768.8, -37.5)
rotation = 1.5708
scale = Vector2(0.636093, 1)

[node name="Shape" type="Node2D" parent="Layer 1/Frame 0/@Group@1929"]

[node name="@@1930" type="Polygon2D" parent="Layer 1/Frame 0/@Group@1929/Shape"]
color = Color(0, 0.6, 0, 1)
polygon = PackedVector2Array(-853.3, 238.1, 471.05, 238.1, 471.05, 322.1, -853.3, 322.1)
polygons = Array[PackedInt32Array]([PackedInt32Array(0, 1, 2, 3)])

[node name="DOMSymbolInstance" type="Node2D" parent="Layer 1/Frame 0"]
position = Vector2(-1111.05, 134.5)
script = ExtResource("2_s6v3u")
path = "res://sm63_godot/BC-3 Falling PLatform12.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 1.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 1.0
tint_color = Color(0, 1, 0, 1)
brightness = 0.0

[node name="AS2" type="Node" parent="Layer 1/Frame 0/DOMSymbolInstance"]
script = SubResource("GDScript_qav6d")

[node name="@DOMSymbolInstance@1931" type="Node2D" parent="Layer 1/Frame 0"]
position = Vector2(-1431, 105.5)
script = ExtResource("2_s6v3u")
path = "res://sm63_godot/BC-3 Falling PLatform2.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 1.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 1.0
tint_color = Color(0, 1, 0, 1)
brightness = 0.0

[node name="AS2" type="Node" parent="Layer 1/Frame 0/@DOMSymbolInstance@1931"]
script = SubResource("GDScript_q45pe")

[node name="@DOMSymbolInstance@1932" type="Node2D" parent="Layer 1/Frame 0"]
position = Vector2(-2731, 89.05)
script = ExtResource("2_s6v3u")
path = "res://sm63_godot/BC-3 Falling Platform 3.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 1.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 1.0
tint_color = Color(0, 1, 0, 1)
brightness = 0.0

[node name="AS2" type="Node" parent="Layer 1/Frame 0/@DOMSymbolInstance@1932"]
script = SubResource("GDScript_4u1sy")

[node name="Layer 2" type="Node2D" parent="."]

[node name="Frame 0" type="Node2D" parent="Layer 2"]
