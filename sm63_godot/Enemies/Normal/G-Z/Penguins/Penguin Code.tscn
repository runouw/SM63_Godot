[gd_scene load_steps=8 format=3]

[ext_resource type="Script" path="res://xfl_parse/symbol_item/symbol_item.gd" id="1_ema25"]
[ext_resource type="Script" path="res://xfl_parse/symbol/symbol_instance.gd" id="2_b77ss"]

[sub_resource type="Animation" id="Animation_r4t7f"]
length = 0.1
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Code/Frame 0:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.0666667),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Code/Frame 2:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.0666667, 0.1),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [false, true, false]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Code 2/Frame 0:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.0666667),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Code 2/Frame 2:visible")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 0.0666667, 0.1),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [false, true, false]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("Layer 1/Frame 0:visible")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0, 0.1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_7bda6"]
_data = {
"Default": SubResource("Animation_r4t7f")
}

[sub_resource type="GDScript" id="GDScript_ogsu4"]
script/source = "extends Node
# Moveright = function () {
# 	offground = true;
# 	if (offground == false) {
# 		break;
# 	}
# 	for (Xspot2=15; Xspot2<40; Xspot2 += 10) {
# 		Xspot = Xspot2+(xspeed*7);
# 		adding = 3;
# 		for (Yspot=-5; Yspot<30; Yspot += adding += 0.5) {
# 			adding = Math.min(adding, 5);
# 			if (!_root.Course.Lava.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 				if (_root.Course.Platforms.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					offground = false;
# 					break;
# 				}
# 				if (_root.Course.BPlatforms.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					offground = false;
# 					break;
# 				}
# 				if (_root.Course.Water.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					offground = true;
# 					break;
# 				}
# 				if (_root.Course.Lava.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					offground = true;
# 					break;
# 				}
# 			}
# 		}
# 	}
# 	if (offground == false) {
# 		if (frame !== \"Turn\") {
# 			xspeed += (walkspeed-xspeed)/5;
# 		}
# 	} else {
# 		randomnum = 0;
# 		if (State == \"Flying\") {
# 			movedirection = \"left\";
# 			randomnum = 0;
# 		}
# 	}
# };
# Moveleft = function () {
# 	offground = true;
# 	if (offground == false) {
# 		break;
# 	}
# 	for (Xspot2=15; Xspot2<40; Xspot2 += 10) {
# 		Xspot = -Xspot2+(xspeed*7);
# 		adding = 3;
# 		for (Yspot=-5; Yspot<30; Yspot += adding += 0.5) {
# 			adding = Math.min(adding, 5);
# 			if (!_root.Course.Lava.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 				if (_root.Course.Platforms.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					offground = false;
# 					break;
# 				}
# 				if (_root.Course.BPlatforms.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					offground = false;
# 					break;
# 				}
# 				if (_root.Course.Water.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					offground = true;
# 					break;
# 				}
# 				if (_root.Course.Lava.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					offground = true;
# 					break;
# 				}
# 			}
# 		}
# 	}
# 	if (offground == false) {
# 		if (frame !== \"Turn\") {
# 			xspeed += (-walkspeed-xspeed)/5;
# 		}
# 	} else {
# 		randomnum = 0;
# 		if (State == \"Flying\") {
# 			movedirection = \"right\";
# 			randomnum = 0;
# 		}
# 	}
# };
# HitTest = function (ground, X, Y) {
# 	if (_root.Course[ground].hitTest(((X)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((Y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) || _root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 		return (true);
# 	} else {
# 		return (false);
# 	}
# };
# "

[sub_resource type="GDScript" id="GDScript_05t3c"]
script/source = "extends Node
# if (scale == undefined) {
# 	scale = 1;
# }
# if (State == undefined) {
# 	State = \"Walk\";
# }
# if (walkspeed == undefined) {
# 	//walkspeed = 3;
# 	walkspeed = 1.5
# }
# if (frame == undefined) {
# 	frame = \"Walk\";
# }
# movecount = 0;
# sliding = false;
# if (movedirection == undefined) {
# 	randomnum = random(2);
# 	if (randomnum == 0) {
# 		movedirection = \"right\";
# 	} else {
# 		movedirection = \"left\";
# 	}
# } else {
# 	randomnum = 0;
# }
# if (WalkDistance == undefined) {
# 	WalkDistance = 50;
# }
# if (shellspeed == undefined) {
# 	shellspeed = 10;
# }
# flyingcoswave = 0;
# randomturncount = 50;
# turncount = 0;
# randomnum = 0;
# if (randomIdleTime == undefined) {
# 	randomIdleTime = 3;
# }
# if (randomWalkDistance == undefined) {
# 	randomWalkDistance = 5;
# }
# if (IdleTime == undefined) {
# 	IdleTime = 50;
# }
# frame = \"Idle\";
# xspeed = 0;
# yspeed = 0;
# wide = 12*scale;
# tall = 25*scale;
# idle = false;
# air = false;
# rotspeed = 0;
# tumble = false;
# startY = _y;
# rot = 0;
# _xscale = scale*100;
# _yscale = scale*100;
# "

[sub_resource type="GDScript" id="GDScript_ixbn8"]
script/source = "extends Node
# stop();
# onEnterFrame = function () {
# 	if (_root.PauseGame == false && _root.playpause == false && Math.abs((_root.currentCamX)-(_x+_parent._x))<1000 && Math.abs((_root.currentCamY)-(_y+_parent._y))<1000) {
# 		//
# 		if (State == \"Walk\" && tumble == false && WalkDistance > 0) {
# 			if (idle == false) {
# 				if (movedirection == \"right\") {
# 					Moveright();
# 					_xscale = -scale*100;
# 				} else {
# 					Moveleft();
# 					_xscale = scale*100;
# 				}
# 				frame = 2;
# 				randomnum += (Math.random()*randomWalkDistance)+1;
# 				if (randomnum>WalkDistance) {
# 					//
# 					idle = true;
# 					//
# 					randomnum = 0;
# 				}
# 			} else {
# 				frame = 1;
# 				xspeed = _root.groundFriction(xspeed, 0.5, 1.2);
# 				randomnum += (Math.random()*randomIdleTime)+1;
# 				turncount += random(5)+2;
# 				if (turncount>randomturncount) {
# 					randomturncount = random(80)+20;
# 					turncount = 0;
# 					if (movedirection == \"right\") {
# 						movedirection = \"left\";
# 						_xscale = scale*100;
# 					} else {
# 						movedirection = \"right\";
# 						_xscale = -scale*100;
# 					}
# 				}
# 				if (randomnum>IdleTime) {
# 					idle = false;
# 					randomnum = 0;
# 					//
# 					IdleTime = random(120)+80;
# 					randomturncount = random(50)+50;
# 					WalkDistance = random(120)+80;
# 					//
# 				}
# 			}
# 		}
# 		if (State == \"Flying\") {
# 			flyingcoswave += 0.1;
# 			yspeed = Math.cos(flyingcoswave)*0.75;
# 			_y += (startY-_y)/50;
# 			if (idle == false) {
# 				if (movedirection == \"right\") {
# 					//xspeed += 0.5; Steven's Edits:
# 					xspeed += walkspeed/6;
# 					xspeed *= 0.7;
# 					_xscale = -scale*100;
# 				} else {
# 					//xspeed -= 0.5; Steven's Edits:
# 					xspeed -= walkspeed/6;
# 					xspeed *= 0.7;
# 					_xscale = scale*100;
# 				}
# 				if (yspeed>0) {
# 					frame = \"FlyingD\";
# 				} else {
# 					frame = \"FlyingU\";
# 				}
# 				randomnum += 1;
# 				if (randomnum>WalkDistance && WalkDistance>0) {
# 					//
# 					idle = true;
# 					//      
# 					randomnum = 0;
# 				}
# 			} else {
# 				if (Math.abs(xspeed)<1) {
# 					frame = \"Turn\";
# 				} else {
# 					if (yspeed>0) {
# 						frame = \"FlyingD\";
# 					} else {
# 						frame = \"FlyingU\";
# 					}
# 					xspeed *= 0.8;
# 				}
# 				randomnum++;
# 				if (randomnum>8) {
# 					idle = false;
# 					if (movedirection == \"right\") {
# 						movedirection = \"left\";
# 					} else {
# 						movedirection = \"right\";
# 					}
# 				}
# 			}
# 		}
# 		if (State !== \"Flying\") {
# 			if (!HitTest(\"Platforms\", _x, _y) && !HitTest(\"BPlatforms\", _x, _y)) {
# 				yspeed += _root.gravity;
# 				air = true;
# 			} else {
# 				if (tumble == true) {
# 					yspeed = Math.min(-yspeed*0.6+3, 0);
# 					xspeed *= 0.6;
# 				} else {
# 					yspeed = Math.min(yspeed, 0);
# 				}
# 				air = false;
# 			}
# 		}
# 		//                                                                                                    
# 		while (HitTest(\"Platforms\", _x, _y-1) || HitTest(\"BPlatforms\", _x, _y-1)) {
# 			_y--;
# 		}
# 		while (HitTest(\"Platforms\", _x+wide, _y-(tall/2))) {
# 			_x--;
# 			if (State == \"Walk\") {
# 				if (movedirection == \"right\") {
# 					movedirection = \"left\";
# 				}
# 			}
# 			xspeed = Math.min(-xspeed*0.7, xspeed);
# 		}
# 		while (HitTest(\"Platforms\", _x-wide, _y-(tall/2))) {
# 			_x++;
# 			if (State == \"Walk\") {
# 				if (movedirection == \"left\") {
# 					movedirection = \"right\";
# 				}
# 			}
# 			xspeed = Math.max(-xspeed*0.7, xspeed);
# 		}
# 		while (HitTest(\"Platforms\", _x, _y-tall)) {
# 			_y++;
# 		}
# 		//
# 		if (State == \"Walk\") {
# 			if (this.body.hitTest(_root.Course.Char.charClip.water) || this.body.hitTest(_root.Course.Char.charClip.frame.water)) {
# 				if (_root.Course.Char.attackFrame == \"Spin\" && _root.Course.Char.attack == true) {
# 					if (_root.Course.Char._x>_x+_parent._x) {
# 						_root.Course.Char.xspeed += 2;
# 						xspeed -= 3;
# 						xspeed *= 0.8;
# 					} else {
# 						_root.Course.Char.xspeed -= 2;
# 						xspeed += 3;
# 						xspeed *= 0.8;
# 					}
# 				}
# 			}
# 		}
# 		if (this.body.hitTest(_root.Course.Char.charClip.body) && (((State !== \"Flying\" && Math.abs(_root.Course.Char.xspeed)>=7 && _root.KeySPACE() && _root.Power>=100 && _root.WaterAmount>0 && _root.Fluddpow == \"T\")) || (_root.Invincible == true && _root.PowerTimer>0))) {
# 			tumble = true;
# 			rotspeed += _root.Course.Char.xspeed;
# 			rotspeed *= 0.8;
# 			xspeed += (_root.Course.Char.xspeed-xspeed)/2;
# 			xspeed *= 0.4;
# 			yspeed -= 5;
# 			yspeed *= 0.7;
# 		}
# 		if (tumble == true && State == \"Flying\") {
# 			State = \"Walk\";
# 		}
# 		if (((this.body.hitTest(_root.Course.Char.charClip.body) && _root.Course.Char.air == false) || (this.body.hitTest(_root.Course.Char.charClip.head) && _root.Course.Char.air == true)) && tumble == false) {
# 			_root.bgsoundFX = new Sound(this);
# 			_root.bgsoundFX.attachSound(\"MarioImpact\");
# 			_root.bgsoundFX.start(0, 1);
# 			_root.bgsoundFX.setVolume(_root.BgVolume);
# 			if (_root.Course.Char._x>_x+_parent._x) {
# 				if (air == false && State == \"Walk\") {
# 					xspeed += _root.Course.Char.xspeed/2;
# 				}
# 				_root.Course.Char.xspeed *= -0.5;
# 				_root.Course.Char.xspeed += 7;
# 				_root.Course.Char.yspeed -= 5;
# 				_root.Course.Char.yspeed *= 0.5;
# 				//_root.MarioHit(0, 0, -5, 7, 7, \"\");
# 			} else {
# 				if (air == false && State == \"Walk\") {
# 					xspeed += _root.Course.Char.xspeed/2;
# 				}
# 				_root.Course.Char.xspeed *= -0.5;
# 				_root.Course.Char.xspeed -= 7;
# 				_root.Course.Char.yspeed -= 5;
# 				_root.Course.Char.yspeed *= 0.5;
# 				//_root.MarioHit(0, 0, -5, -7, 7, \"\");
# 			}
# 		}
# 		if (this.head.hitTest(_root.Course.Char.charClip.feet) && _root.Course.Char.air == true && _root.Course.Char.yspeed>1 && !(_root.Invincible == true && _root.PowerTimer>0)) {
# 			_root.Course.Char.yspeed *= -0.5;
# 			_root.Course.Char.yspeed -= 5;
# 			//
# 			_root.bgsoundFX = new Sound(this);
# 			_root.bgsoundFX.attachSound(\"MarioImpact\");
# 			_root.bgsoundFX.start(0, 1);
# 			_root.bgsoundFX.setVolume(_root.BgVolume);
# 		}
# 		//                                
# 		if (air == false && Math.abs(xspeed)<3) {
# 			tumble = false;
# 		}
# 		xspeed = Math.max(xspeed, -12);
# 		xspeed = Math.min(xspeed, 12);
# 		_y += yspeed;
# 		_x += xspeed;
# 		if (tumble == true) {
# 			frame = \"Tumble\";
# 			rot = _rotation;
# 			rot += rotspeed;
# 		} else {
# 			if (frame == \"Tumble\") {
# 				frame = 1;
# 			}
# 			rot *= 0.8;
# 		}
# 		clip.frame._rotation = rot;
# 		clip.gotoAndStop(frame);
# 	}
# };
# "

[node name="Penguin Code" type="Node2D"]
script = ExtResource("1_ema25")
source_xml = "res://sm63/LIBRARY/Enemies/Normal/G-Z/Penguins/Penguin Code.xml"
linkage = "PenguinCode"
linkage_export = true
regenerate = false

[node name="Timeline" type="AnimationPlayer" parent="."]
libraries = {
"Timeline": SubResource("AnimationLibrary_7bda6")
}

[node name="Layer 1" type="Node2D" parent="."]

[node name="Frame 0" type="Node2D" parent="Layer 1"]

[node name="DOMSymbolInstance" type="Node2D" parent="Layer 1/Frame 0"]
script = ExtResource("2_b77ss")
path = "res://sm63_godot/Enemies/Normal/G-Z/Penguins/Penguin Clip.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 1.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 0.0
tint_color = Color(0, 0, 0, 1)
brightness = 0.0

[node name="Code 2" type="Node2D" parent="."]

[node name="Frame 0" type="Node2D" parent="Code 2"]

[node name="AS2" type="Node" parent="Code 2/Frame 0"]
script = SubResource("GDScript_ogsu4")

[node name="Frame 2" type="Node2D" parent="Code 2"]
visible = false

[node name="DOMSymbolInstance" type="Node2D" parent="Code 2/Frame 2"]
position = Vector2(1, 2.4)
scale = Vector2(0.265381, 0.265076)
script = ExtResource("2_b77ss")
path = "res://sm63_godot/Xtra/Lineless Movieclip.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 0.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 0.0
tint_color = Color(0, 0, 0, 1)
brightness = 0.0

[node name="@DOMSymbolInstance@50711" type="Node2D" parent="Code 2/Frame 2"]
position = Vector2(-1, -15)
scale = Vector2(0.265381, 0.141602)
script = ExtResource("2_b77ss")
path = "res://sm63_godot/Xtra/Lineless Movieclip.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 0.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 0.0
tint_color = Color(0, 0, 0, 1)
brightness = 0.0

[node name="Code" type="Node2D" parent="."]

[node name="Frame 0" type="Node2D" parent="Code"]

[node name="AS2" type="Node" parent="Code/Frame 0"]
script = SubResource("GDScript_05t3c")

[node name="Frame 2" type="Node2D" parent="Code"]
visible = false

[node name="AS2" type="Node" parent="Code/Frame 2"]
script = SubResource("GDScript_ixbn8")
