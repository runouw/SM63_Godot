[gd_scene load_steps=8 format=3]

[ext_resource type="Script" path="res://xfl_parse/symbol_item/symbol_item.gd" id="1_h00ft"]
[ext_resource type="Script" path="res://xfl_parse/symbol/symbol_instance.gd" id="2_1aq88"]

[sub_resource type="Animation" id="Animation_dafxe"]
length = 0.1
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Layer 3/Frame 0:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.0666667),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Layer 3/Frame 2:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.0666667, 0.1),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [false, true, false]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Layer 2/Frame 0:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.0666667),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Layer 2/Frame 2:visible")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 0.0666667, 0.1),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [false, true, false]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("Layer 1/Frame 0:visible")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0, 0.1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_m5t8b"]
_data = {
"Default": SubResource("Animation_dafxe")
}

[sub_resource type="GDScript" id="GDScript_w0b04"]
script/source = "extends Node
# Moveright = function () {
# 	offground = true;
# 	if (offground == false) {
# 		break;
# 	}
# 	for (Xspot2=15; Xspot2<30; Xspot2 += 10) {
# 		Xspot = Xspot2+(xspeed*7);
# 		adding = 3;
# 		for (Yspot=-5; Yspot<30; Yspot += adding += 0.5) {
# 			adding = Math.min(adding, 5);
# 			if (!_root.Course.Lava.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 				if (_root.Course.Platforms.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					offground = false;
# 					break;
# 				}
# 				if (_root.Course.BPlatforms.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					offground = false;
# 					break;
# 				}
# 				if (_root.Course.Water.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					offground = true;
# 					break;
# 				}
# 			}
# 		}
# 	}
# 	if (offground == false) {
# 		xspeed += walkspeed;
# 	} else {
# 		randomnum = 0;
# 		movedirection = \"left\";
# 		if (air == false) {
# 			frame = \"Idle\";
# 		}
# 	}
# };
# Moveleft = function () {
# 	offground = true;
# 	if (offground == false) {
# 		break;
# 	}
# 	for (Xspot2=15; Xspot2<30; Xspot2 += 10) {
# 		Xspot = -Xspot2+(xspeed*7);
# 		adding = 3;
# 		for (Yspot=-5; Yspot<30; Yspot += adding += 0.5) {
# 			adding = Math.min(adding, 5);
# 			if (!_root.Course.Lava.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 				if (_root.Course.Platforms.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					offground = false;
# 					break;
# 				}
# 				if (_root.Course.BPlatforms.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					offground = false;
# 					break;
# 				}
# 				if (_root.Course.Water.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					offground = true;
# 					break;
# 				}
# 			}
# 		}
# 	}
# 	if (offground == false) {
# 		xspeed -= walkspeed;
# 	} else {
# 		randomnum = 0;
# 		movedirection = \"right\";
# 		if (air == false && !frame == \"tumble\" && !frame == \"Squish\") {
# 			frame = \"Idle\";
# 		}
# 	}
# };
# "

[sub_resource type="GDScript" id="GDScript_0dshv"]
script/source = "extends Node
# if (scale == undefined) {
# 	scale = 1;
# }
# if (walkspeed == undefined) {
# 	walkspeed = 0.5;
# }
# if (movedirection == undefined) {
# 	randomnum = random(2);
# 	if (randomnum == 0) {
# 		movedirection = \"right\";
# 	} else {
# 		movedirection = \"left\";
# 	}
# } else {
# 	randomnum = 0;
# }
# if (WalkDistance == undefined) {
# 	WalkDistance = 100;
# }
# restartvars = function () {
# 	deadcount = 0;
# 	powerhit = false;
# 	seeing = false;
# 	see = false;
# 	hurt = false;
# 	frame = \"Idle\";
# 	xspeed = 0;
# 	yspeed = 0;
# 	wide = 10*scale;
# 	tall = 25*scale;
# 	air = false;
# 	tumble = false;
# 	tumblerot = 0;
# 	_xscale = scale*100;
# 	_yscale = scale*100;
# 	//
# 	bounce = false;
# };
# restartvars();
# //
# saveY = _y;
# saveX = _x;
# //
# //
# this.createEmptyMovieClip(\"soundclip\", this.getNextHighestDepth());
# //
# if (attached !== true) {
# 	if (_root.Course.coincountnum == undefined) {
# 		_root.Course.coincountnum = 0;
# 	} else {
# 		_root.Course.coincountnum++;
# 	}
# 	if (_root[\"coindata\"+_root.playingcourse][0] == undefined) {
# 		_root[\"coindata\"+_root.playingcourse] = [\"\"];
# 	}
# 	coinnum = _root.Course.coincountnum;
# 	if (_root[\"coindata\"+_root.playingcourse][coinnum] == 1 && _root[\"coindata\"+_root.playingcourse][coinnum] !== undefined) {
# 		//gotoAndStop(\"end\");
# 	}
# }
# "

[sub_resource type="GDScript" id="GDScript_wn0bm"]
script/source = "extends Node
# stop();
# onEnterFrame = function () {
# 	if (_root.PauseGame == false) {
# 		if ((Math.abs((_root.currentCamX)-(_x+_parent._x))<600 && Math.abs((_root.currentCamY)-(_y+_parent._y))<600) || battleArena == true) {
# 			_yscale = scale*100;
# 			_xscale = scale*100;
# 			eye._yscale = (1/scale)*100;
# 			eye._xscale = (1/scale)*100;
# 			if (hurt == true) {
# 				xspeed = 0;
# 				yspeed = 0;
# 				tumble = false;
# 				clip.frame._rotation = tumblerot;
# 			}
# 			//                               
# 			distancevolume = Math.sqrt(Math.pow((_root.currentCamX)-(_x+_parent._x), 2)+Math.pow((_root.currentCamY)-(_y+_parent._y), 2));
# 			distancevolume /= 100;
# 			distancevolume *= 15;
# 			distancevolume = Math.min(100, distancevolume);
# 			distancevolume = Math.max(0, distancevolume);
# 			distancevolume -= 100;
# 			distancevolume *= -1;
# 			//
# 			if (distancevolume>=1) {
# 				soundclip.setVolume((_root.MarioVolume/100)*distancevolume);
# 				panX = (_root.currentCamX)-(_x+_parent._x);
# 				panX /= -2;
# 				panX = Math.min(100, panX);
# 				panX = Math.max(-100, panX);
# 				soundclip.setPan(panX);
# 			}
# 			//                       
# 			if (frame !== \"Squish\") {
# 				if (_root.playpause == false) {
# 					if (this.eye.hitTest(_root.Course.Char.charClip.body) && tumble == false) {
# 						if (seeing == false) {
# 							see = true;
# 							//
# 							if (distancevolume>=1) {
# 								soundclip = new Sound(this);
# 								soundclip.attachSound(\"Goomba-Attention\");
# 								soundclip.start(0, 1);
# 								soundclip.setVolume((_root.MarioVolume/100)*distancevolume);
# 								soundclip.setPan(panX);
# 							}
# 							//                                            
# 						}
# 						seeing = true;
# 					} else {
# 						seeing = false;
# 						see = false;
# 					}
# 				} else {
# 					seeing = false;
# 					see = false;
# 				}
# 				if (this.body.hitTest(_root.Course.Char.charClip.body) && _root.Course.Char.attackFrame == \"Dive\" && _root.Course.Char.attack == true && Math.abs(_root.Course.Char.xspeed)>1) {
# 					tumble = true;
# 					yspeed -= Math.abs((_root.Course.Char.xspeed+1)/5)/scale;
# 					xspeed += ((_root.Course.Char.xspeed-(xspeed/1.5)))/scale;
# 					_y -= 3;
# 					if (Math.abs(xspeed/(scale/2))>17) {
# 						powerhit = true;
# 					}
# 				}
# 				// enemy hurt                                                 
# 				if (_root.Course.Enemyhurt.hitTest(((_x-wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) && _root.Course.Enemyhurt.hitTest(((_x+wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					tumble = true;
# 					yspeed -= Math.abs((7)/5)/scale;
# 					xspeed += (((Math.random()*4-2)-(xspeed/1.5)))/scale;
# 					_y -= 3;
# 					if (Math.abs(yspeed/(scale/2))>5) {
# 						powerhit = true;
# 					}
# 				} else {
# 					if (_root.Course.Enemyhurt.hitTest(((_x-wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 						tumble = true;
# 						yspeed -= Math.abs((7)/5)/scale;
# 						xspeed += Math.max((((12)-(xspeed/1.5)))/scale, 0);
# 						_y -= 3;
# 						if (Math.abs(xspeed/(scale/2))>10) {
# 							powerhit = true;
# 						}
# 					}
# 					if (_root.Course.Enemyhurt.hitTest(((_x+wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 						tumble = true;
# 						yspeed -= Math.abs((7)/5)/scale;
# 						xspeed += Math.min((((-12)-(xspeed/1.5)))/scale, 0);
# 						_y -= 3;
# 						if (Math.abs(xspeed/(scale/2))>10) {
# 							powerhit = true;
# 						}
# 					}
# 				}
# 				//    
# 				if (this.body.hitTest(_root.Course.Char.charClip.water) || this.body.hitTest(_root.Course.Char.charClip.frame.water) || this.head.hitTest(_root.Course.Char.charClip.water) || this.head.hitTest(_root.Course.Char.charClip.frame.water)) {
# 					tumble = true;
# 					yspeed -= 1.5/scale;
# 					if (_root.Course.Char.attackFrame == \"Spin\" && _root.Course.Char.attack == true) {
# 						if (_root.Course.Char._x>_x+_parent._x) {
# 							xspeed *= 0.7;
# 							xspeed -= 20/scale;
# 						} else {
# 							xspeed *= 0.7;
# 							xspeed += 20/scale;
# 						}
# 					} else {
# 						if (_root.Course.Char._xscale>0) {
# 							if (_root.Fluddpow == \"T\" || (_root.Fluddpow == \"H\" && _root.Course.Char.attackFrame == \"Dive\" && _root.Course.Char.attack == true)) {
# 								xspeed *= 0.9;
# 								xspeed += 6/scale;
# 							} else {
# 								xspeed *= 0.9;
# 								xspeed -= 3/scale;
# 							}
# 						} else {
# 							if (_root.Fluddpow == \"T\" || (_root.Fluddpow == \"H\" && _root.Course.Char.attackFrame == \"Dive\" && _root.Course.Char.attack == true)) {
# 								xspeed *= 0.9;
# 								xspeed -= 6/scale;
# 							} else {
# 								xspeed *= 0.9;
# 								xspeed += 3/scale;
# 							}
# 						}
# 					}
# 					if (Math.abs(xspeed/(scale/2))>9) {
# 						powerhit = true;
# 					}
# 					_y -= 3;
# 				}
# 				if (this.body.hitTest(_root.Course.Char.charClip.body) && (Math.abs(_root.Course.Char.xspeed)>=7 && _root.KeySPACE() && _root.Power>=100 && _root.WaterAmount>0 && _root.Fluddpow == \"T\")) {
# 					tumble = true;
# 					yspeed -= Math.abs((_root.Course.Char.xspeed+1)/5)/scale;
# 					xspeed += ((_root.Course.Char.xspeed-(xspeed/1.5)))/scale;
# 					_y -= 3;
# 					if (Math.abs(xspeed/(scale/2))>25) {
# 						powerhit = true;
# 					}
# 				}
# 				if (this.body.hitTest(_root.Course.Char.charClip.body) && (_root.Course.Char.attack == false || !(_root.Course.Char.attackFrame == \"Dive\" && _root.Course.Char.attack == true && Math.abs(_root.Course.Char.xspeed)>0.3)) && tumble == false && !(Math.abs(_root.Course.Char.xspeed)>7 && _root.KeySPACE() && _root.Power>=100 && _root.WaterAmount>0 && _root.Fluddpow == \"T\")) {
# 					if (_root.Course.Char._x>_x+_parent._x) {
# 						_root.MarioHit(1, 90, -5, 7, 7, \"\");
# 					} else {
# 						_root.MarioHit(1, 90, -5, -7, 7, \"\");
# 					}
# 				}
# 				if (this.head.hitTest(_root.Course.Char.charClip.feet) && _root.Course.Char.air == true && _root.Course.Char.yspeed>0) {
# 					_root.Course.Char.yspeed = 0;
# 					hurt = true;
# 					tumblerot = 0;
# 					//
# 					bounce = true;
# 				}
# 				if (_root.Course.Water.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					hurt = true;
# 					tumblerot = 0;
# 				}
# 				if (!_root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) && !_root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					_y += yspeed;
# 					yspeed += 1;
# 					yspeed *= 0.98;
# 					air = true;
# 				}
# 				if (_root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) || _root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					if (air == true) {
# 						jump = false;
# 					}
# 					air = false;
# 					if (tumble == false) {
# 						yspeed = Math.min(0, yspeed);
# 					} else {
# 						if (Math.abs(yspeed)+Math.abs(xspeed/2)>11) {
# 							tumble = false;
# 							if (powerhit == true) {
# 								tumblerot = 0;
# 								hurt = true;
# 							}
# 						}
# 						if (yspeed>3) {
# 							yspeed = Math.min(0, -yspeed+2);
# 							xspeed = _root.groundFriction(xspeed, 2, 1.2);
# 						} else {
# 							xspeed = _root.groundFriction(xspeed, 0.5, 1.1);
# 							yspeed = 0;
# 						}
# 						if (Math.abs(xspeed)<2) {
# 							tumble = false;
# 							if (powerhit == true) {
# 								tumblerot = 0;
# 								hurt = true;
# 							}
# 						}
# 					}
# 				}
# 				while (_root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y-3)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) || _root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y-3)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					_y--;
# 				}
# 				// walls            
# 				while (_root.Course.Platforms.hitTest(((_x+wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					_x--;
# 					movedirection = \"left\";
# 					randomnum = 0;
# 					if (tumble == true) {
# 						if (xspeed<7) {
# 							xspeed = Math.max(xspeed*0.7, -xspeed*0.7);
# 						} else {
# 							if (xspeed>0 && powerhit == true) {
# 								hurt = true;
# 								tumblerot = -90;
# 							}
# 						}
# 					}
# 				}
# 				while (_root.Course.Platforms.hitTest(((_x-wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					_x++;
# 					movedirection = \"right\";
# 					randomnum = 0;
# 					if (tumble == true) {
# 						if (xspeed>7) {
# 							xspeed = Math.min(xspeed*0.7, -xspeed*0.7);
# 						} else {
# 							if (xspeed<0 && powerhit == true) {
# 								hurt = true;
# 								tumblerot = 90;
# 							}
# 						}
# 					}
# 				}
# 				// ^ walls ^
# 				while ((_root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+3)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) || _root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+3)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) && !(_root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y-1)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) || _root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y-3)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true))) {
# 					_y++;
# 				}
# 				while (_root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y-1)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) || _root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y-3)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					_y--;
# 				}
# 				// 
# 				if (_root.Course.Lava.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					_root.Course.Char.yspeed = 0;
# 					hurt = true;
# 					tumblerot = 0;
# 					//
# 					bounce = false;
# 				}
# 				//                                                                                    
# 				if (hurt == true) {
# 					if (frame !== \"squish\") {
# 						//
# 						if (distancevolume>=1) {
# 							soundclip = new Sound(this);
# 							soundclip.attachSound(\"Goomba-Stomped\");
# 							soundclip.start(0, 1);
# 							soundclip.setVolume((_root.MarioVolume/100)*distancevolume);
# 							soundclip.setPan(panX);
# 						}
# 					}
# 					frame = \"Squish\";
# 				}
# 				if (air == true && frame !== \"Squish\") {
# 					frame = \"jump\";
# 				}
# 				if (seeing == true && tumble == false && frame !== \"Squish\") {
# 					if (_root.Course.Char._x>_x+_parent._x && Math.abs((_root.Course.Char._x)-(_x+_parent._x))>20) {
# 						Moveright();
# 					} else if (_root.Course.Char._x<_x+_parent._x && Math.abs((_root.Course.Char._x)-(_x+_parent._x))>20) {
# 						Moveleft();
# 					} else {
# 						if (air == false && frame !== \"Squish\" && tumble == false) {
# 							frame = \"Idle\";
# 						}
# 					}
# 				}
# 				if (seeing == false && tumble == false && frame !== \"Squish\") {
# 					randomnum++;
# 					if (movedirection == \"right\") {
# 						Moveright();
# 					}
# 					if (movedirection == \"left\") {
# 						Moveleft();
# 					}
# 					if (randomnum>WalkDistance) {
# 						if (movedirection == \"right\") {
# 							movedirection = \"left\";
# 						} else {
# 							movedirection = \"right\";
# 						}
# 						randomnum = 0;
# 					}
# 				}
# 				if (see == true) {
# 					jump = true;
# 					see = false;
# 				}
# 				if (jump == true && air == false) {
# 					yspeed = -5;
# 					_y -= 3;
# 					jump = false;
# 					frame = \"jump\";
# 				}
# 				if (air == false && frame !== \"Squish\" && tumble == false && Math.abs(xspeed)>0.3 && (_root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+3)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) || _root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+3)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true))) {
# 					if (xspeed>0) {
# 						frame = \"Walkright\";
# 					} else {
# 						frame = \"Walkleft\";
# 					}
# 				} else if (air == false && frame !== \"Squish\" && tumble == false) {
# 					frame = \"Idle\";
# 				}
# 				if (air == true && _root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+3)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) || _root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+3)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					air == false;
# 					if (frame !== \"Squish\" && tumble == false && Math.abs(xspeed)>0.3 && (_root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+3)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) || _root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+3)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true))) {
# 						if (xspeed>0) {
# 							frame = \"Walkright\";
# 						} else {
# 							frame = \"Walkleft\";
# 						}
# 					} else if (air == false && frame !== \"Squish\" && tumble == false) {
# 						frame = \"Idle\";
# 					}
# 				}
# 				if (tumble == true && hurt == false) {
# 					tumblerot += xspeed*3;
# 					frame = \"tumble\";
# 				}
# 				if (yspeed>7) {
# 					yspeed *= 0.9;
# 				}
# 				yspeed = Math.max(yspeed, -10);
# 				yspeed = Math.min(yspeed, 10);
# 				xspeed = Math.max(xspeed, -15);
# 				xspeed = Math.min(xspeed, 15);
# 				_x += xspeed;
# 				if (tumble == false) {
# 					xspeed = _root.groundFriction(xspeed, 0.3, 1.1);
# 				} else {
# 					xspeed = _root.groundFriction(xspeed, 0.05, 1.01);
# 				}
# 				if (tumble == false && Math.abs(tumblerot)>0) {
# 					tumblerot = _root.groundFriction(tumblerot, 5, 1.3);
# 					frame = \"tumble\";
# 				}
# 				clip.frame._rotation = -tumblerot;
# 				clip.gotoAndStop(frame);
# 				if (frame == \"tumble\" && powerhit == false) {
# 					clip.frame.gotoAndStop(2);
# 				} else if (frame == \"tumble\") {
# 					clip.frame.gotoAndStop(1);
# 				}
# 			}
# 		} else {
# 			if (frame == \"Squish\") {
# 				deadcount++;
# 			}
# 			if ((deadcount>30 || Math.abs((_root.currentCamX)-(saveX+_parent._x))>600 || Math.abs((_root.currentCamY)-(saveY+_parent._y))>600) && battleArena !== true) {
# 				_y = saveY;
# 				_x = saveX;
# 				//
# 				restartvars();
# 				//
# 			}
# 		}
# 	}
# };
# "

[node name="Goomba" type="Node2D"]
script = ExtResource("1_h00ft")
source_xml = "res://sm63/LIBRARY/Enemies/Normal/G-Z/Goomba/Goomba.xml"
linkage = "GoombaCode"
linkage_export = true
regenerate = false

[node name="Timeline" type="AnimationPlayer" parent="."]
libraries = {
"Timeline": SubResource("AnimationLibrary_m5t8b")
}

[node name="Layer 1" type="Node2D" parent="."]

[node name="Frame 0" type="Node2D" parent="Layer 1"]

[node name="DOMSymbolInstance" type="Node2D" parent="Layer 1/Frame 0"]
position = Vector2(0, -8)
script = ExtResource("2_1aq88")
path = "res://sm63_godot/Enemies/Normal/G-Z/Goomba/Goomba Frames.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 1.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 0.0
tint_color = Color(0, 0, 0, 1)
brightness = 0.0

[node name="Layer 2" type="Node2D" parent="."]

[node name="Frame 0" type="Node2D" parent="Layer 2"]

[node name="AS2" type="Node" parent="Layer 2/Frame 0"]
script = SubResource("GDScript_w0b04")

[node name="Frame 2" type="Node2D" parent="Layer 2"]
visible = false

[node name="DOMSymbolInstance" type="Node2D" parent="Layer 2/Frame 2"]
position = Vector2(0, 0.95)
scale = Vector2(0.265381, 0.141373)
script = ExtResource("2_1aq88")
path = "res://sm63_godot/Xtra/Lineless Movieclip.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 0.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 0.0
tint_color = Color(0, 0, 0, 1)
brightness = 0.0

[node name="@DOMSymbolInstance@50647" type="Node2D" parent="Layer 2/Frame 2"]
position = Vector2(0, -13)
scale = Vector2(0.265381, 0.141602)
script = ExtResource("2_1aq88")
path = "res://sm63_godot/Xtra/Lineless Movieclip.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 0.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 0.0
tint_color = Color(0, 0, 0, 1)
brightness = 0.0

[node name="@DOMSymbolInstance@50648" type="Node2D" parent="Layer 2/Frame 2"]
position = Vector2(0.1, -2.95)
script = ExtResource("2_1aq88")
path = "res://sm63_godot/Enemies/Normal/G-Z/Goomba/Goomba Eyesight.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 1.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 0.0
tint_color = Color(0, 0, 0, 1)
brightness = 0.0

[node name="Layer 3" type="Node2D" parent="."]

[node name="Frame 0" type="Node2D" parent="Layer 3"]

[node name="AS2" type="Node" parent="Layer 3/Frame 0"]
script = SubResource("GDScript_0dshv")

[node name="Frame 2" type="Node2D" parent="Layer 3"]
visible = false

[node name="AS2" type="Node" parent="Layer 3/Frame 2"]
script = SubResource("GDScript_wn0bm")
