[gd_scene load_steps=8 format=3]

[ext_resource type="Script" path="res://xfl_parse/symbol_item/symbol_item.gd" id="1_35q1f"]
[ext_resource type="Script" path="res://xfl_parse/symbol/symbol_instance.gd" id="2_5uy0x"]

[sub_resource type="Animation" id="Animation_3122r"]
length = 0.1
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Layer 2/Frame 0:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.0666667),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Layer 2/Frame 2:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.0666667, 0.1),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [false, true, false]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Layer 1/Frame 0:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_cpvta"]
_data = {
"Default": SubResource("Animation_3122r")
}

[sub_resource type="GDScript" id="GDScript_sl7l2"]
script/source = "extends Node
# Moveright = function () {
# 	offground = true;
# 	if (offground == false) {
# 		break;
# 	}
# 	for (Xspot2=5; Xspot2<25; Xspot2 += 7) {
# 		Xspot = Xspot2+(xspeed*7);
# 		adding = 3;
# 		for (Yspot=-5; Yspot<30; Yspot += adding += 0.5) {
# 			adding = Math.min(adding, 5);
# 			if (!_root.Course.Lava.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 				if (_root.Course.Platforms.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					offground = false;
# 					break;
# 				}
# 				if (_root.Course.BPlatforms.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					offground = false;
# 					break;
# 				}
# 				if (_root.Course.Water.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					break;
# 				}
# 			}
# 		}
# 	}
# 	if (offground == false || AiGround == false) {
# 		return true;
# 	} else {
# 		randomnum = 0;
# 		return false;
# 	}
# };
# Moveleft = function () {
# 	offground = true;
# 	if (offground == false) {
# 		break;
# 	}
# 	for (Xspot2=5; Xspot2<25; Xspot2 += 7) {
# 		Xspot = -Xspot2+(xspeed*7);
# 		adding = 3;
# 		for (Yspot=-5; Yspot<30; Yspot += adding += 0.5) {
# 			adding = Math.min(adding, 5);
# 			if (!_root.Course.Lava.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 				if (_root.Course.Platforms.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					offground = false;
# 					break;
# 				}
# 				if (_root.Course.BPlatforms.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					offground = false;
# 					break;
# 				}
# 				if (_root.Course.Water.hitTest(((_x+Xspot)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+Yspot)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					break;
# 				}
# 			}
# 		}
# 	}
# 	if (offground == false || AiGround == false) {
# 		return true;
# 	} else {
# 		randomnum = 0;
# 		return false;
# 	}
# };
# MakeSound = function () {
# 	randomnum = random(2)+1;
# 	_root.bgsoundFX = new Sound(this);
# 	_root.bgsoundFX.attachSound(\"thwomp-\"+randomnum);
# 	_root.bgsoundFX.start(0, 1);
# 	_root.bgsoundFX.setVolume(_root.BgVolume);
# };
# "

[sub_resource type="GDScript" id="GDScript_1cuki"]
script/source = "extends Node
# if (scale == undefined) {
# 	scale = 1;
# }
# restartvars = function () {
# 	deadcount = 0;
# 	xspeed = 0;
# 	yspeed = 0;
# 	hurt = false;
# 	frame = \"idle\";
# 	_xscale = scale*100;
# 	tall = 25*scale;
# 	wide = 15*scale;
# 	stun = 0;
# };
# restartvars();
# "

[sub_resource type="GDScript" id="GDScript_iqecu"]
script/source = "extends Node
# stop();
# onEnterFrame = function () {
# 	if (_root.PauseGame == false) {
# 		if (frame !== \"dead\") {
# 			stun--;
# 			stun = Math.max(stun, 0);
# 			if (Math.abs((_root.currentCamX)-(_x+_parent._x))<600 && Math.abs((_root.currentCamY)-(_y+_parent._y))<600) {
# 				_yscale = scale*100;
# 				eye._yscale = (1/scale)*100;
# 				eye._xscale = (1/scale)*50;
# 				//   
# 				if (_root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) || _root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					if (air == true && Math.abs(yspeed)>3) {
# 						yspeed = Math.max(-yspeed*0.7, yspeed*0.7);
# 					} else if (air == true) {
# 						yspeed = 0;
# 					}
# 					yspeed = Math.min(yspeed, 0);
# 					air = false;
# 				} else {
# 					air = true;
# 				}
# 				// Walls 
# 				while (_root.Course.Platforms.hitTest(((_x+wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					_x--;
# 					xspeed = Math.max(xspeed*0.7, -xspeed*0.7);
# 				}
# 				while (_root.Course.Platforms.hitTest(((_x-wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					_x++;
# 					xspeed = Math.min(xspeed*0.7, -xspeed*0.7);
# 				}
# 				// ground
# 				while ((_root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+3)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) || _root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+3)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) && !(_root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y-1)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) || _root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y-3)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true))) {
# 					_y++;
# 				}
# 				while (_root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y-1)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) || _root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y-3)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					_y--;
# 				}
# 				//
# 				while (_root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y-tall)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					_y--;
# 				}
# 				//
# 				if (air == true) {
# 					yspeed += _root.gravity;
# 					yspeed = Math.min(yspeed, 7);
# 				}
# 				//                                                                                 
# 				if (air == false && frame !== \"hurt\") {
# 					if (this.eye.hitTest(_root.Course.Char.charClip.body) && stun == 0) {
# 						seeing = true;
# 						if (Math.abs(_root.Course.Char._x-(_x+_parent._x))<300) {
# 							if (_root.Course.Char._x>_x+_parent._x) {
# 								_xscale = scale*100;
# 								if (Moveright()) {
# 									xspeed -= Math.min((xspeed-7)/13, 0)*scale;
# 								}
# 							} else {
# 								_xscale = -scale*100;
# 								if (Moveleft()) {
# 									xspeed -= Math.max((xspeed+7)/13, 0)*scale;
# 								}
# 							}
# 						}
# 					} else {
# 						seeing = false;
# 					}
# 				}
# 				if (air == false) {
# 					xspeed = _root.groundFriction(xspeed, 0.1, 1.05);
# 				}
# 				//                        
# 				if (_root.Course.Enemyhurt.hitTest(((_x-wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) && _root.Course.Enemyhurt.hitTest(((_x+wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					yspeed -= Math.abs((3)/5)/scale;
# 					xspeed += (((Math.random()*2-1)-(xspeed/1.5)))/scale;
# 					_y -= 3;
# 				} else {
# 					if (_root.Course.Enemyhurt.hitTest(((_x-wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 						yspeed -= Math.abs((3)/5)/scale;
# 						xspeed += Math.max((((6)-(xspeed/1.5)))/scale, 0);
# 						_y -= 3;
# 					}
# 					if (_root.Course.Enemyhurt.hitTest(((_x+wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 						yspeed -= Math.abs((3)/5)/scale;
# 						xspeed += Math.min((((-6)-(xspeed/1.5)))/scale, 0);
# 						_y -= 3;
# 					}
# 				}
# 				//                           
# 				if (this.body.hitTest(_root.Course.Char.charClip.body) && _root.Course.Char.attackFrame == \"Dive\" && _root.Course.Char.attack == true && Math.abs(_root.Course.Char.xspeed)>5) {
# 					frame = \"hurt\";
# 					stun = 15;
# 					//
# 					if (_root.Course.Char._x>_x+_parent._x) {
# 						mxspeed = xspeed;
# 						mxspeed = Math.max(mxspeed, 0);
# 						_root.Course.Char.xspeed *= 0.5;
# 						_root.Course.Char.xspeed += mxspeed*0.3+3;
# 					} else {
# 						mxspeed = xspeed;
# 						mxspeed = Math.min(mxspeed, 0);
# 						_root.Course.Char.xspeed *= 0.5;
# 						_root.Course.Char.xspeed += mxspeed*0.3-3;
# 					}
# 					//
# 					yspeed -= Math.abs(((_root.Course.Char.xspeed/2)+1)/7)/scale;
# 					xspeed += ((((_root.Course.Char.xspeed/1.5)-(xspeed/1.5)))*5)/scale;
# 					_y -= 3;
# 				}
# 				//                                                              
# 				if (this.body.hitTest(_root.Course.Char.charClip.water) || this.body.hitTest(_root.Course.Char.charClip.frame.water) || this.head.hitTest(_root.Course.Char.charClip.water) || this.head.hitTest(_root.Course.Char.charClip.frame.water)) {
# 					frame = \"hurt\";
# 					stun = 15;
# 					yspeed -= 1.5/scale;
# 					if (_root.Course.Char.attackFrame == \"Spin\" && _root.Course.Char.attack == true) {
# 						if (_root.Course.Char._x>_x+_parent._x) {
# 							mxspeed = xspeed;
# 							_root.Course.Char.xspeed *= 0.7;
# 							_root.Course.Char.xspeed += mxspeed*0.3+1.5;
# 						} else {
# 							mxspeed = xspeed;
# 							_root.Course.Char.xspeed *= 0.7;
# 							_root.Course.Char.xspeed += mxspeed*0.3-1.5;
# 						}
# 						if (_root.Course.Char._x>_x+_parent._x) {
# 							xspeed *= 0.7;
# 							xspeed -= 5/scale;
# 							stun = 15;
# 						} else {
# 							xspeed *= 0.7;
# 							xspeed += 5/scale;
# 							stun = 15;
# 						}
# 					} else {
# 						if (_root.Course.Char._xscale>0) {
# 							if (_root.Fluddpow == \"T\" || (_root.Fluddpow == \"H\" && _root.Course.Char.attackFrame == \"Dive\" && _root.Course.Char.attack == true)) {
# 								xspeed *= 0.9;
# 								xspeed += 2/scale;
# 								xspeed += _root.Course.Char.xspeed/2;
# 								stun = 7;
# 								//
# 								if (_root.Course.Char._x>_x+_parent._x) {
# 									mxspeed = xspeed;
# 									mxspeed = Math.max(mxspeed, 0);
# 									_root.Course.Char.xspeed *= 0.3;
# 									_root.Course.Char.xspeed += mxspeed*0.3+3;
# 								} else {
# 									mxspeed = xspeed;
# 									mxspeed = Math.min(mxspeed, 0);
# 									_root.Course.Char.xspeed *= 0.3;
# 									_root.Course.Char.xspeed += mxspeed*0.3-3;
# 								}
# 							} else {
# 								xspeed *= 0.9;
# 								xspeed -= 2/scale;
# 								stun = 15;
# 							}
# 						} else {
# 							if (_root.Fluddpow == \"T\" || (_root.Fluddpow == \"H\" && _root.Course.Char.attackFrame == \"Dive\" && _root.Course.Char.attack == true)) {
# 								xspeed *= 0.9;
# 								xspeed -= 2/scale;
# 								xspeed += _root.Course.Char.xspeed/2;
# 								stun = 7;
# 								//
# 								if (_root.Course.Char._x>_x+_parent._x) {
# 									mxspeed = xspeed;
# 									mxspeed = Math.max(mxspeed, 0);
# 									_root.Course.Char.xspeed *= 0.3;
# 									_root.Course.Char.xspeed += mxspeed*0.3+3;
# 								} else {
# 									mxspeed = xspeed;
# 									mxspeed = Math.min(mxspeed, 0);
# 									_root.Course.Char.xspeed *= 0.3;
# 									_root.Course.Char.xspeed += mxspeed*0.3-3;
# 								}
# 							} else {
# 								xspeed *= 0.9;
# 								xspeed += 2/scale;
# 								stun = 15;
# 							}
# 						}
# 					}
# 					_y -= 3;
# 				}
# 				//                                                           
# 				if (this.head.hitTest(_root.Course.Char.charClip.feet) && _root.Course.Char.yspeed>1 && _root.Course.Char.attack == false) {
# 					MakeSound();
# 					stun = 15;
# 					if (_root.Course.Char._x>_x+_parent._x) {
# 						mxspeed = xspeed;
# 						xspeed += (-_root.Course.Char.yspeed/1.5)-2+(_root.Course.Char.xspeed/2);
# 						_root.Course.Char.yspeed /= 2;
# 						_root.Course.Char.yspeed -= 9+Math.abs(mxspeed)/2;
# 						_root.Course.Char.xspeed *= -0.5;
# 						_root.Course.Char.xspeed += mxspeed*0.7;
# 					} else {
# 						mxspeed = xspeed;
# 						xspeed += (_root.Course.Char.yspeed/1.5)+2+(_root.Course.Char.xspeed/2);
# 						_root.Course.Char.yspeed /= 2;
# 						_root.Course.Char.yspeed -= 9+Math.abs(mxspeed)/2;
# 						_root.Course.Char.xspeed *= -0.5;
# 						_root.Course.Char.xspeed += mxspeed*0.7;
# 					}
# 				}
# 				//                                                              
# 				if (stun<=0 && frame !== \"hurt\" && this.body.hitTest(_root.Course.Char.charClip.body) && (_root.Course.Char.attack == false || !(_root.Course.Char.attackFrame == \"Dive\" && _root.Course.Char.attack == true && Math.abs(_root.Course.Char.xspeed)>5)) && !(Math.abs(_root.Course.Char.xspeed)>7 && _root.KeySPACE() && _root.Power>=100 && _root.WaterAmount>0 && _root.Fluddpow == \"T\")) {
# 					MakeSound();
# 					stun = 3;
# 					if (_root.Course.Char._x>_x+_parent._x) {
# 						mxspeed = _root.Course.Char.xspeed;
# 						_root.MarioHit(0, 0, 5, xspeed+3+(xspeed/2), 13, \"none\");
# 						frame = \"hurt\";
# 						yspeed -= 3;
# 						xspeed *= -0.3;
# 						xspeed += mxspeed*0.3;
# 					} else {
# 						mxspeed = _root.Course.Char.xspeed;
# 						_root.MarioHit(0, 0, 5, xspeed-3+(xspeed/2), 13, \"none\");
# 						frame = \"hurt\";
# 						yspeed -= 3;
# 						xspeed *= -0.3;
# 						xspeed += mxspeed*0.3;
# 					}
# 				}
# 				//                                                                      
# 				if (frame == \"hurt\" && this.body.hitTest(_root.Course.Char.charClip.body) && (_root.Course.Char.attack == false || !(_root.Course.Char.attackFrame == \"Dive\" && _root.Course.Char.attack == true && Math.abs(_root.Course.Char.xspeed)>0.3)) && !(Math.abs(_root.Course.Char.xspeed)>7 && _root.KeySPACE() && _root.Power>=100 && _root.WaterAmount>0 && _root.Fluddpow == \"T\")) {
# 					if (_root.Course.Char._x>_x+_parent._x) {
# 						_root.MarioHit(0, 0, -0, 1, 0, \"none\");
# 						xspeed -= (_root.Course.Char.xspeed+xspeed)*0.3;
# 					} else {
# 						_root.MarioHit(0, 0, -0, -1, 0, \"none\");
# 						xspeed -= (_root.Course.Char.xspeed+xspeed)*0.3;
# 					}
# 				}
# 				//                                                                           
# 				if (frame == \"hurt\" && air == false && Math.abs(yspeed)<3) {
# 					frame = \"idle\";
# 				}
# 				if (frame !== \"hurt\" && seeing == false) {
# 					if (Math.abs(xspeed)>1) {
# 						frame = \"run\";
# 					} else {
# 						frame = \"idle\";
# 					}
# 				}
# 				if (seeing == true && frame !== \"hurt\") {
# 					frame = \"run\";
# 				}
# 				if (_root.Course.Lava.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					frame = \"dead\";
# 				}
# 				clip.gotoAndStop(frame);
# 				xspeed = Math.max(xspeed, -15);
# 				xspeed = Math.min(xspeed, 15);
# 				_x += xspeed;
# 				_y += yspeed;
# 			}
# 		}
# 	}
# 	if (frame == \"dead\") {
# 		deadcount++;
# 	}
# 	if ((deadcount>=30 || Math.abs((_root.currentCamX)-(_x+_parent._x))>600 || Math.abs((_root.currentCamY)-(_y+_parent._y))>600) && (Math.abs((_root.currentCamX)-(saveX+_parent._x))>600 || Math.abs((_root.currentCamY)-(saveY+_parent._y))>600)) {
# 		_y = saveY;
# 		_x = saveX;
# 		//
# 		restartvars();
# 		//
# 	}
# };
# "

[node name=" Bully Code" type="Node2D"]
script = ExtResource("1_35q1f")
source_xml = "res://sm63/LIBRARY/Enemies/Normal/A-F/Bully/Clips/Bully Code.xml"
linkage = "BullyCode"
linkage_export = true
regenerate = false

[node name="Timeline" type="AnimationPlayer" parent="."]
libraries = {
"Timeline": SubResource("AnimationLibrary_cpvta")
}

[node name="Layer 1" type="Node2D" parent="."]

[node name="Frame 0" type="Node2D" parent="Layer 1"]

[node name="AS2" type="Node" parent="Layer 1/Frame 0"]
script = SubResource("GDScript_sl7l2")

[node name="DOMSymbolInstance" type="Node2D" parent="Layer 1/Frame 0"]
script = ExtResource("2_5uy0x")
path = "res://sm63_godot/Enemies/Normal/A-F/Bully/Clips/Bully Clip.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 1.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 0.0
tint_color = Color(0, 0, 0, 1)
brightness = 0.0

[node name="Layer 2" type="Node2D" parent="."]

[node name="Frame 0" type="Node2D" parent="Layer 2"]

[node name="AS2" type="Node" parent="Layer 2/Frame 0"]
script = SubResource("GDScript_1cuki")

[node name="Frame 2" type="Node2D" parent="Layer 2"]
visible = false

[node name="AS2" type="Node" parent="Layer 2/Frame 2"]
script = SubResource("GDScript_iqecu")

[node name="DOMSymbolInstance" type="Node2D" parent="Layer 2/Frame 2"]
position = Vector2(0, -1.1)
scale = Vector2(0.265381, 0.212067)
script = ExtResource("2_5uy0x")
path = "res://sm63_godot/Xtra/Lineless Movieclip.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 0.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 0.0
tint_color = Color(0, 0, 0, 1)
brightness = 0.0

[node name="@DOMSymbolInstance@50564" type="Node2D" parent="Layer 2/Frame 2"]
position = Vector2(0, -11.1)
scale = Vector2(0.265381, 0.212067)
script = ExtResource("2_5uy0x")
path = "res://sm63_godot/Xtra/Lineless Movieclip.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 0.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 0.0
tint_color = Color(0, 0, 0, 1)
brightness = 0.0

[node name="@DOMSymbolInstance@50565" type="Node2D" parent="Layer 2/Frame 2"]
position = Vector2(0.1, -13)
scale = Vector2(0.957153, 1.05762)
script = ExtResource("2_5uy0x")
path = "res://sm63_godot/Enemies/Normal/G-Z/Goomba/Goomba Eyesight.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 1.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 0.0
tint_color = Color(0, 0, 0, 1)
brightness = 0.0
