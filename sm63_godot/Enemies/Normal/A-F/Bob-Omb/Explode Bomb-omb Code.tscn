[gd_scene load_steps=6 format=3]

[ext_resource type="Script" path="res://xfl_parse/symbol_item/symbol_item.gd" id="1_rjb3x"]
[ext_resource type="Script" path="res://xfl_parse/symbol/symbol_instance.gd" id="2_br4ko"]

[sub_resource type="Animation" id="Animation_3njt0"]
length = 0.0333333
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Layer 2/Frame 0:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.0333333),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Layer 1/Frame 0:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.0333333),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_5hdus"]
_data = {
"Default": SubResource("Animation_3njt0")
}

[sub_resource type="GDScript" id="GDScript_2x003"]
script/source = "extends Node
# if (yspeed == undefined) {
# 	yspeed = 0;
# }
# if (xspeed == undefined) {
# 	xspeed = 0;
# }
# if (scale == undefined) {
# 	scale = 1;
# }
# _xscale = scale*100;
# _yscale = scale*100;
# if (rotation == undefined) {
# 	rotation = random(360);
# }
# sounded = false;
# explode = false;
# explodetimer = 0;
# onEnterFrame = function () {
# 	if (_root.PauseGame == false) {
# 		if (explode == false) {
# 			tumblespeed = xspeed/2;
# 			rotation += tumblespeed;
# 			clip.frame._rotation = rotation;
# 			clip.gotoAndStop(1);
# 			if (yspeed>0 && _root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+8)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) || _root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y+8)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 				explode = true;
# 			}
# 			if (xspeed<0 && _root.Course.Platforms.hitTest(((_x-7)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 				explode = true;
# 			}
# 			if (xspeed>0 && _root.Course.Platforms.hitTest(((_x+7)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 				explode = true;
# 			}
# 			if (yspeed<0 && _root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y-8)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 				explode = true;
# 			}
# 			//                           
# 			if (_root.Course.Enemyhurt.hitTest(((_x-wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) && _root.Course.Enemyhurt.hitTest(((_x+wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 				yspeed -= Math.abs((7)/5)/scale;
# 				xspeed += (((Math.random()*4-2)-(xspeed/1.5)))/scale;
# 				_y -= 3;
# 			} else {
# 				if (_root.Course.Enemyhurt.hitTest(((_x-wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					yspeed -= Math.abs((7)/5)/scale;
# 					xspeed += Math.max((((12)-(xspeed/1.5)))/scale, 0);
# 					_y -= 3;
# 				}
# 				if (_root.Course.Enemyhurt.hitTest(((_x+wide)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, (((_y-(tall/2)))*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					yspeed -= Math.abs((7)/5)/scale;
# 					xspeed += Math.min((((-12)-(xspeed/1.5)))/scale, 0);
# 					_y -= 3;
# 				}
# 			}
# 			//    
# 			if (this.body.hitTest(_root.Course.Char.charClip.water) || this.body.hitTest(_root.Course.Char.charClip.frame.water) || this.head.hitTest(_root.Course.Char.charClip.water) || this.head.hitTest(_root.Course.Char.charClip.frame.water)) {
# 				yspeed -= 1.5/scale;
# 				if (_root.Course.Char.attackFrame == \"Spin\" && _root.Course.Char.attack == true) {
# 					if (_root.Course.Char._x>_x+_parent._x) {
# 						xspeed *= 0.7;
# 						xspeed -= 20/scale;
# 					} else {
# 						xspeed *= 0.7;
# 						xspeed += 20/scale;
# 					}
# 				} else {
# 					if (_root.Course.Char._xscale>0) {
# 						if (_root.Fluddpow == \"T\" || (_root.Fluddpow == \"H\" && _root.Course.Char.attackFrame == \"Dive\" && _root.Course.Char.attack == true)) {
# 							xspeed *= 0.9;
# 							xspeed += 6/scale;
# 						} else {
# 							xspeed *= 0.9;
# 							xspeed -= 3/scale;
# 						}
# 					} else {
# 						if (_root.Fluddpow == \"T\" || (_root.Fluddpow == \"H\" && _root.Course.Char.attackFrame == \"Dive\" && _root.Course.Char.attack == true)) {
# 							xspeed *= 0.9;
# 							xspeed -= 6/scale;
# 						} else {
# 							xspeed *= 0.9;
# 							xspeed += 3/scale;
# 						}
# 					}
# 				}
# 				_y -= 3;
# 			}
# 			if (this.body.hitTest(_root.Course.Char.charClip.body) && (Math.abs(_root.Course.Char.xspeed)>=7 && _root.KeySPACE() && _root.Power>=100 && _root.WaterAmount>0 && _root.Fluddpow == \"T\")) {
# 				yspeed -= Math.abs((_root.Course.Char.xspeed+1)/5)/scale;
# 				xspeed += (((_root.Course.Char.xspeed-(xspeed/1.5)))/scale)*0.8;
# 				_y -= 3;
# 			}
# 			//                         
# 			explodetimer++;
# 			myColor = new Color(this);
# 			colorTrans = new Object();
# 			powerblink = (Math.sin(_root.angleToRadians(Math.pow(explodetimer, 3)/700))*25)+25+(explodetimer/6);
# 			colorTrans = {ra:100, rb:(Math.pow(explodetimer, 2))/75+powerblink, ga:(-(Math.pow(explodetimer, 2))/100)+100+powerblink, gb:0, ba:(-(Math.pow(explodetimer, 2))/100)+100+powerblink, bb:0, aa:100, ab:0};
# 			myColor.setTransform(colorTrans);
# 			if (explodetimer>=96) {
# 				explode = true;
# 			}
# 			//                
# 			yspeed += _root.gravity;
# 			if (yspeed>7) {
# 				yspeed *= 0.9;
# 			}
# 			repeats = Math.round((Math.abs(xspeed)+Math.abs(yspeed))/5)+1;
# 			repeats = Math.min(repeats, 15);
# 			for (i=0; i<repeats; i++) {
# 				if (i>5) {
# 					break;
# 				}
# 				_x += xspeed/repeats;
# 				_y += yspeed/repeats;
# 				//                     
# 				while (_root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true) || _root.Course.BPlatforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					explode = true;
# 					rotation = 0;
# 					_y--;
# 				}
# 				while (_root.Course.Platforms.hitTest(((_x-12)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y-5)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					explode = true;
# 					rotation = 90;
# 					_x++;
# 				}
# 				while (_root.Course.Platforms.hitTest(((_x+12)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y-5)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					explode = true;
# 					rotation = -90;
# 					_x--;
# 				}
# 				while (_root.Course.Platforms.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y-10)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					explode = true;
# 					rotation = -180;
# 					_y++;
# 				}
# 				while (_root.Course.Lava.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					explode = true;
# 					rotation = 0;
# 					_y--;
# 				}
# 				while (_root.Course.Water.hitTest(((_x)*_root.coursescale/100)+(_parent._x*_root.coursescale/100)+_root.Course._x, ((_y)*_root.coursescale/100)+(_parent._y*_root.coursescale/100)+_root.Course._y, true)) {
# 					explode = true;
# 					rotation = 0;
# 					_y--;
# 				}
# 			}
# 			//         
# 		} else {
# 			//
# 			if (this.clip.frame.explode.hitTest(_root.Course.Char.charClip.body)) {
# 				if (_root.Course.Char._x>_x+_parent._x) {
# 					_root.MarioHit(2, 90, -7, 5, 10, \"Mario-Squish\", true);
# 				} else {
# 					_root.MarioHit(2, 90, -7, -5, 10, \"Mario-Squish\", true);
# 				}
# 			}
# 			// 
# 			if (sounded == false) {
# 				explodetimer = 0;
# 				//
# 				myColor = new Color(this);
# 				colorTrans = new Object();
# 				powerblink = (Math.sin(_root.angleToRadians(Math.pow(explodetimer, 3)/700))*25)+25+(explodetimer/6);
# 				colorTrans = {ra:100, rb:(Math.pow(explodetimer, 2))/75+powerblink, ga:(-(Math.pow(explodetimer, 2))/100)+100+powerblink, gb:0, ba:(-(Math.pow(explodetimer, 2))/100)+100+powerblink, bb:0, aa:100, ab:0};
# 				myColor.setTransform(colorTrans);
# 				//
# 				sounded = true;
# 				distancevolume = Math.sqrt(Math.pow((_root.currentCamX)-(_x+_parent._x), 2)+Math.pow((_root.currentCamY)-(_y+_parent._y), 2));
# 				distancevolume /= 100;
# 				distancevolume *= 15;
# 				distancevolume = Math.min(100, distancevolume);
# 				distancevolume = Math.max(0, distancevolume);
# 				distancevolume -= 100;
# 				distancevolume *= -1;
# 				//
# 				soundclip = new Sound(this);
# 				soundclip.attachSound(\"Explosion\");
# 				soundclip.start(0, 1);
# 				soundclip.setVolume((_root.MarioVolume/100)*distancevolume);
# 				soundclip.setPan(panX);
# 				//
# 				_root.Course.Enemyhurt.attachMovie(\"EnemyHurtBox\", \"Box\"+_root.Course.Enemyhurt.getNextHighestDepth(), _root.Course.Enemyhurt.getNextHighestDepth(), {_x:_x, _y:_y-15, _yscale:30, _xscale:30, time:6});
# 			}
# 			//                      
# 			clip.frame._rotation = rotation;
# 			clip.gotoAndStop(2);
# 		}
# 	}
# };
# "

[node name="Explode Bomb-omb Code" type="Node2D"]
script = ExtResource("1_rjb3x")
source_xml = "res://sm63/LIBRARY/Enemies/Normal/A-F/Bob-Omb/Explode Bomb-omb Code.xml"
linkage = "ExplodeBomb-ombCode"
linkage_export = true
regenerate = false

[node name="Timeline" type="AnimationPlayer" parent="."]
libraries = {
"Timeline": SubResource("AnimationLibrary_5hdus")
}

[node name="Layer 1" type="Node2D" parent="."]

[node name="Frame 0" type="Node2D" parent="Layer 1"]

[node name="DOMSymbolInstance" type="Node2D" parent="Layer 1/Frame 0"]
position = Vector2(-2.75, 1.25)
script = ExtResource("2_br4ko")
path = "res://sm63_godot/Enemies/Normal/A-F/Bob-Omb/Explode Bomb-omb.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 1.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 0.0
tint_color = Color(0, 0, 0, 1)
brightness = 0.0

[node name="Layer 2" type="Node2D" parent="."]

[node name="Frame 0" type="Node2D" parent="Layer 2"]

[node name="AS2" type="Node" parent="Layer 2/Frame 0"]
script = SubResource("GDScript_2x003")

[node name="DOMSymbolInstance" type="Node2D" parent="Layer 2/Frame 0"]
position = Vector2(0, 2.9)
scale = Vector2(0.265381, 0.212067)
script = ExtResource("2_br4ko")
path = "res://sm63_godot/Xtra/Lineless Movieclip.tscn"
red_multiplier = 1.0
green_multiplier = 1.0
blue_multiplier = 1.0
alpha_multiplier = 0.0
red_offset = 0.0
green_offset = 0.0
blue_offset = 0.0
tint_multiplier = 0.0
tint_color = Color(0, 0, 0, 1)
brightness = 0.0
